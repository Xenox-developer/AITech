#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∏–¥–µ–æ
"""

import os
import sys
import tempfile
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    print("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
    
    try:
        import yt_dlp
        print("‚úÖ yt-dlp —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install yt-dlp")
        return False
    
    try:
        import whisperx
        print("‚úÖ whisperx —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå whisperx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install whisperx")
        return False
    
    try:
        import torch
        print(f"‚úÖ torch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (CUDA: {'–¥–æ—Å—Ç—É–ø–Ω–∞' if torch.cuda.is_available() else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'})")
    except ImportError:
        print("‚ùå torch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    try:
        from app import download_video_from_url, is_valid_video_url
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False
    
    return True

def test_whisper_models():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π Whisper"""
    print("\nü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏ Whisper...")
    
    try:
        from ml import load_models, whisper_model
        
        if whisper_model is None:
            print("‚ö†Ô∏è  –ú–æ–¥–µ–ª—å Whisper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å...")
            load_models()
        
        if whisper_model is not None:
            print("‚úÖ –ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å Whisper")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–æ–¥–µ–ª—è–º–∏ Whisper: {e}")
        return False

def test_url_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é URL...")
    
    from app import is_valid_video_url
    
    valid_urls = [
        "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
        "https://youtu.be/dQw4w9WgXcQ",
        "https://vimeo.com/123456789",
        "https://rutube.ru/video/123456/",
        "https://ok.ru/video/123456",
        "https://vk.com/video123456_789"
    ]
    
    invalid_urls = [
        "https://example.com/video.mp4",
        "https://google.com",
        "not-a-url",
        ""
    ]
    
    print("‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ URL:")
    for url in valid_urls:
        result = is_valid_video_url(url)
        print(f"  {url} -> {'‚úì' if result else '‚úó'}")
    
    print("\n‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ URL:")
    for url in invalid_urls:
        result = is_valid_video_url(url)
        print(f"  {url} -> {'‚úì' if result else '‚úó'}")

def test_video_download():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    print("\nüì• –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ...")
    
    from app import download_video_from_url
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
    test_url = "https://www.youtube.com/watch?v=jNQXAC9IVRw"  # "Me at the zoo" - 11 —Å–µ–∫—É–Ω–¥
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º uploads –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤–º–µ—Å—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π
        temp_dir = "uploads"
        if not os.path.exists(temp_dir):
            os.makedirs(temp_dir)
            
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º: {test_url}")
        filepath, filename, title = download_video_from_url(test_url, temp_dir)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:")
        print(f"  –§–∞–π–ª: {filename}")
        print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
        print(f"  –†–∞–∑–º–µ—Ä: {os.path.getsize(filepath) / (1024*1024):.2f} –ú–ë")
        
        if os.path.exists(filepath):
            print("‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return filepath, filename
        else:
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None, None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None, None

def test_video_transcription(filepath, filename):
    """–¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    print(f"\nüé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ: {filename}")
    
    try:
        from ml import transcribe_video_with_timestamps, transcribe_video_simple
        
        print("–ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏...")
        result = transcribe_video_with_timestamps(filepath)
        
        if result and result.get('full_text'):
            print(f"‚úÖ –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:")
            print(f"  –¢–µ–∫—Å—Ç: {len(result['full_text'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"  –°–µ–≥–º–µ–Ω—Ç—ã: {len(result.get('segments', []))}")
            print(f"  –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: {len(result.get('key_moments', []))}")
            print(f"  –Ø–∑—ã–∫: {result.get('language', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            print(f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.get('total_duration', 0):.2f} —Å–µ–∫")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
            if result['full_text']:
                preview = result['full_text'][:200] + "..." if len(result['full_text']) > 200 else result['full_text']
                print(f"  –ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞: {preview}")
            
            return True
        else:
            print("‚ùå –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            
            print("–ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
            simple_text = transcribe_video_simple(filepath)
            
            if simple_text:
                print(f"‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {len(simple_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                preview = simple_text[:200] + "..." if len(simple_text) > 200 else simple_text
                print(f"  –ü—Ä–µ–≤—å—é: {preview}")
                return True
            else:
                print("‚ùå –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ç–∞–∫–∂–µ –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:")
        return False

def test_full_processing(filepath, filename):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
    print(f"\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {filename}")
    
    try:
        from ml import process_file
        
        result = process_file(filepath, filename)
        
        if result:
            print("‚úÖ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞:")
            print(f"  –¢–µ–º—ã: {len(result.get('topics_data', {}).get('main_topics', []))}")
            print(f"  –§–ª–µ—à-–∫–∞—Ä—Ç—ã: {len(result.get('flashcards', []))}")
            print(f"  –†–µ–∑—é–º–µ: {len(result.get('summary', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"  –í–∏–¥–µ–æ —Å–µ–≥–º–µ–Ω—Ç—ã: {len(result.get('video_segments', []))}")
            print(f"  –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: {len(result.get('key_moments', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É
            topics = result.get('topics_data', {}).get('main_topics', [])
            if topics:
                first_topic = topics[0]
                print(f"  –ü–µ—Ä–≤–∞—è —Ç–µ–º–∞: {first_topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            return True
        else:
            print("‚ùå –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        return False

def main():
    print("üé• –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if not test_imports():
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
    if not test_whisper_models():
        print("\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–ª—è–º–∏ Whisper. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –ø—Ä–æ–±–ª–µ–º.")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é URL
    test_url_validation()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ç–µ—Å—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏
    response = input("\nü§î –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ? (y/N): ").strip().lower()
    if response not in ['y', 'yes', '–¥–∞']:
        print("‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    filepath, filename = test_video_download()
    if not filepath:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        transcription_success = test_video_transcription(filepath, filename)
        
        if transcription_success:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            processing_success = test_full_processing(filepath, filename)
            
            if processing_success:
                print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("\n‚ö†Ô∏è  –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π")
        else:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")
            
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(filepath):
            os.remove(filepath)
            print(f"üóëÔ∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filename} —É–¥–∞–ª–µ–Ω")
    
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()