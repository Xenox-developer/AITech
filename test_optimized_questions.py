#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
"""

import time
import json
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
import sys
sys.path.append('.')

def test_optimized_question_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ app.py
    from app import generate_test_questions
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞)
    test_data = {
        'filename': 'test_video.mp4',
        'full_text': '''
        –í —ç—Ç–æ–º –≤–∏–¥–µ–æ –º—ã –∏–∑—É—á–∞–µ–º –æ—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. 
        –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ —Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö.
        –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:
        1. –û–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º (supervised learning) - –∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        2. –û–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è (unsupervised learning) - –∫–æ–≥–¥–∞ –º—ã –∏—â–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏
        3. –û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º (reinforcement learning) - –∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è
        
        –í–∞–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:
        - –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ (overfitting) - –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º —Ö–æ—Ä–æ—à–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        - –ù–µ–¥–æ–æ–±—É—á–µ–Ω–∏–µ (underfitting) - –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–∞—è
        - –í–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:
        - –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        - –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        - –î–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π
        - –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
        ''',
        'summary': '–í–∏–¥–µ–æ –æ–± –æ—Å–Ω–æ–≤–∞—Ö –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, —Ç–∏–ø–∞—Ö –æ–±—É—á–µ–Ω–∏—è –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö',
        'topics_data': {
            '–û—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è': {
                'subtopics': ['–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', '–ò—Å—Ç–æ—Ä–∏—è']
            },
            '–¢–∏–ø—ã –æ–±—É—á–µ–Ω–∏—è': {
                'subtopics': ['–° —É—á–∏—Ç–µ–ª–µ–º', '–ë–µ–∑ —É—á–∏—Ç–µ–ª—è', '–° –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º']
            },
            '–ü—Ä–æ–±–ª–µ–º—ã –æ–±—É—á–µ–Ω–∏—è': {
                'subtopics': ['–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ', '–ù–µ–¥–æ–æ–±—É—á–µ–Ω–∏–µ', '–í–∞–ª–∏–¥–∞—Ü–∏—è']
            },
            '–ê–ª–≥–æ—Ä–∏—Ç–º—ã': {
                'subtopics': ['–†–µ–≥—Ä–µ—Å—Å–∏—è', '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è', '–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏']
            }
        }
    }
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤...")
    print(f"üìä –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(test_data['full_text'])} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º: {len(test_data['topics_data'])}")
    
    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
    start_time = time.time()
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions = generate_test_questions(test_data)
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        end_time = time.time()
        generation_time = end_time - start_time
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"‚ùì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if questions:
            difficulties = {}
            topics = set()
            
            for q in questions:
                diff = q.get('difficulty', 'unknown')
                difficulties[diff] = difficulties.get(diff, 0) + 1
                topics.add(q.get('topic', 'unknown'))
            
            print(f"üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulties}")
            print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º: {len(topics)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
            print("\nüìù –ü—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
            for i, q in enumerate(questions[:3], 1):
                print(f"\n{i}. {q.get('question', '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞')}")
                print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {q.get('difficulty', 'unknown')}")
                print(f"   –¢–µ–º–∞: {q.get('topic', 'unknown')}")
                print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q.get('correct_answer', 'unknown')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            quality_issues = []
            
            for i, q in enumerate(questions, 1):
                if not q.get('question'):
                    quality_issues.append(f"–í–æ–ø—Ä–æ—Å {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
                
                if not q.get('options') or len(q.get('options', {})) != 4:
                    quality_issues.append(f"–í–æ–ø—Ä–æ—Å {i}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞")
                
                if not q.get('correct_answer'):
                    quality_issues.append(f"–í–æ–ø—Ä–æ—Å {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
                
                if not q.get('explanation'):
                    quality_issues.append(f"–í–æ–ø—Ä–æ—Å {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ")
            
            if quality_issues:
                print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ ({len(quality_issues)}):")
                for issue in quality_issues[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"   - {issue}")
            else:
                print("\n‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞!")
            
            # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if generation_time < 30:
                print(f"üöÄ –û–¢–õ–ò–ß–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ {generation_time:.1f}—Å (—Ü–µ–ª—å: <30—Å)")
            elif generation_time < 60:
                print(f"‚úÖ –•–û–†–û–®–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ {generation_time:.1f}—Å (—Ü–µ–ª—å: <30—Å)")
            elif generation_time < 120:
                print(f"‚ö†Ô∏è –ú–ï–î–õ–ï–ù–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ {generation_time:.1f}—Å (—Ü–µ–ª—å: <30—Å)")
            else:
                print(f"‚ùå –û–ß–ï–ù–¨ –ú–ï–î–õ–ï–ù–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ {generation_time:.1f}—Å (—Ü–µ–ª—å: <30—Å)")
            
            return {
                'success': True,
                'generation_time': generation_time,
                'questions_count': len(questions),
                'quality_issues': len(quality_issues),
                'difficulties': difficulties
            }
        
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
            return {'success': False, 'error': 'No questions generated'}
    
    except Exception as e:
        end_time = time.time()
        generation_time = end_time - start_time
        
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {generation_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        return {
            'success': False,
            'error': str(e),
            'generation_time': generation_time
        }

def test_multiple_runs():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n" + "="*60)
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (3 –∑–∞–ø—É—Å–∫–∞)")
    print("="*60)
    
    results = []
    
    for i in range(3):
        print(f"\n--- –ó–∞–ø—É—Å–∫ {i+1}/3 ---")
        result = test_optimized_question_generation()
        results.append(result)
        
        if i < 2:  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            time.sleep(2)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    successful_runs = [r for r in results if r.get('success')]
    
    if successful_runs:
        avg_time = sum(r['generation_time'] for r in successful_runs) / len(successful_runs)
        avg_questions = sum(r['questions_count'] for r in successful_runs) / len(successful_runs)
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤: {len(successful_runs)}/3")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"‚ùì –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {avg_questions:.1f}")
        
        if avg_time < 30:
            print("üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è < 30 —Å–µ–∫—É–Ω–¥!")
        else:
            print(f"‚ö†Ô∏è –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (—Ü–µ–ª—å: <30—Å, —Ñ–∞–∫—Ç: {avg_time:.1f}—Å)")
    
    else:
        print("‚ùå –í—Å–µ –∑–∞–ø—É—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π")

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        # –ï—Å–ª–∏ python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä—É—á–Ω—É—é
        try:
            with open('.env', 'r') as f:
                for line in f:
                    if line.strip() and not line.startswith('#'):
                        key, value = line.strip().split('=', 1)
                        os.environ[key] = value
        except FileNotFoundError:
            pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.environ.get('OPENAI_API_KEY'):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)
    
    print("üß™ –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò –í–û–ü–†–û–°–û–í")
    print("=" * 60)
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%H:%M:%S')}")
    
    # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç
    test_optimized_question_generation()
    
    # –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    test_multiple_runs()
    
    print(f"\nüïê –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}")
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")