#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from analytics import element_analytics
from auth import User, generate_password_hash
import uuid
from datetime import datetime, timedelta
import random
import sqlite3

def create_test_users():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üë• –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    test_users = [
        ('alice@example.com', 'Alice Johnson', 'password123'),
        ('bob@example.com', 'Bob Smith', 'password123'),
        ('charlie@example.com', 'Charlie Brown', 'password123'),
        ('diana@example.com', 'Diana Prince', 'password123'),
        ('eve@example.com', 'Eve Wilson', 'password123'),
    ]
    
    user_ids = []
    
    for email, username, password in test_users:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            c.execute('SELECT id FROM users WHERE email = ?', (email,))
            existing = c.fetchone()
            
            if existing:
                user_ids.append(existing[0])
                print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing[0]})")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                password_hash = generate_password_hash(password)
                c.execute('''
                    INSERT INTO users (email, username, password_hash, created_at)
                    VALUES (?, ?, ?, ?)
                ''', (email, username, password_hash, datetime.now() - timedelta(days=random.randint(1, 30))))
                
                user_id = c.lastrowid
                user_ids.append(user_id)
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id})")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
    
    conn.commit()
    conn.close()
    
    return user_ids

def generate_user_interactions(user_ids):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    interactions_templates = [
        ('button', 'upload-btn', 'click', '/', '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'),
        ('button', 'analyze-btn', 'click', '/result/123', '–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞'),
        ('button', 'next-card', 'click', '/result/123', '–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞'),
        ('button', 'prev-card', 'click', '/result/123', '–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞'),
        ('link', 'dashboard-link', 'click', '/', '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'),
        ('link', 'profile-link', 'click', '/dashboard', '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'),
        ('form', 'upload-form', 'submit', '/', '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'),
        ('input', 'search-input', 'focus', '/dashboard', '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'),
        ('select', 'filter-select', 'change', '/my-results', '–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'),
        ('navigation', 'main-menu', 'click', '/dashboard', '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'),
        ('content', 'flashcard-1', 'view', '/result/123', '–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞'),
        ('page', 'body', 'scroll', '/result/123', '–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞'),
    ]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    activity_levels = [
        (user_ids[0], 50, 5),  # Alice - –æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–∞—è
        (user_ids[1], 25, 3),  # Bob - —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        (user_ids[2], 10, 2),  # Charlie - –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        (user_ids[3], 5, 1),   # Diana - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        (user_ids[4], 0, 0),   # Eve - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è
    ]
    
    for user_id, interaction_count, session_count in activity_levels:
        if interaction_count == 0:
            continue
            
        print(f"  üë§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {interaction_count} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for session_num in range(session_count):
            session_id = str(uuid.uuid4())
            
            # –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            session_date = datetime.now() - timedelta(days=random.randint(0, 30))
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é
            element_analytics.start_session(
                session_id=session_id,
                user_id=user_id,
                user_agent=f"TestBrowser/{random.randint(1, 5)}.0",
                ip_address=f"192.168.1.{random.randint(1, 255)}"
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            interactions_in_session = interaction_count // session_count
            if session_num == 0:  # –í –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
                interactions_in_session += interaction_count % session_count
            
            for _ in range(interactions_in_session):
                element_type, element_id, action_type, page_url, page_title = random.choice(interactions_templates)
                
                metadata = {
                    'test_data': True,
                    'user_agent': f"TestBrowser/{random.randint(1, 5)}.0",
                    'session_number': session_num + 1
                }
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
                element_analytics.record_interaction(
                    user_id=user_id,
                    session_id=session_id,
                    element_type=element_type,
                    element_id=element_id,
                    action_type=action_type,
                    page_url=page_url,
                    page_title=page_title,
                    metadata=metadata
                )
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            element_analytics.end_session(session_id)
    
    print("  ‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

def test_user_analytics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = create_test_users()
    
    if len(user_ids) < 5:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    generate_user_interactions(user_ids)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìà –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_stats = element_analytics.get_detailed_user_stats(days=30)
    print(f"\nüë• –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats['overview']['total_users']}")
    print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats['overview']['active_users']}")
    print(f"  –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats['overview']['new_users']}")
    
    print(f"\nüèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for i, user in enumerate(user_stats['user_stats'][:5], 1):
        print(f"  {i}. {user['username']} ({user['email']})")
        print(f"     –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {user['total_interactions']}, –°–µ—Å—Å–∏–π: {user['unique_sessions']}")
        print(f"     –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: {user['active_days']}, –°—Ç—Ä–∞–Ω–∏—Ü: {user['pages_visited']}")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
    engagement = element_analytics.get_user_engagement_metrics(days=30)
    print(f"\nüìä –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
    for segment in engagement['activity_segments']:
        print(f"  {segment['segment']}: {segment['user_count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    print(f"\n‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏:")
    for session in engagement['recent_sessions'][:5]:
        duration = f"{session['duration_minutes']} –º–∏–Ω" if session['duration_minutes'] else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        print(f"  {session['username']}: {session['total_interactions']} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π, {duration}")
    
    print(f"\nüìà –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
    avg = engagement['averages']
    print(f"  –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg['interactions_per_user']}")
    print(f"  –°–µ—Å—Å–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg['sessions_per_user']}")
    print(f"  –°—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg['pages_per_user']}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == '__main__':
    test_user_analytics()