#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞
"""
import sqlite3
import requests
import sys

def test_access_tokens():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞"""
    print("üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    c.execute('SELECT id, access_token, user_id FROM result WHERE access_token IS NOT NULL LIMIT 3')
    results = c.fetchall()
    
    if not results:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞")
    
    base_url = "http://127.0.0.1:5000"
    
    for result_id, access_token, user_id in results:
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ID={result_id}, user_id={user_id}")
        print(f"üîë –¢–æ–∫–µ–Ω: {access_token[:20]}...")
        
        # –¢–µ—Å—Ç 1: –î–æ—Å—Ç—É–ø –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º)
        token_url = f"{base_url}/result/{access_token}"
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            session = requests.Session()
            response = session.get(token_url, timeout=5)
            
            if user_id:  # –ï—Å–ª–∏ —É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—Å—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü
                if response.status_code == 200:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                    if "login" in response.url.lower() or "–≤–æ–π—Ç–∏" in response.text.lower():
                        print(f"‚úÖ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Ö–æ–¥)")
                    else:
                        print(f"‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
                        return False
                elif response.status_code == 302:
                    print(f"‚úÖ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ): {response.status_code}")
                elif response.status_code == 403:
                    print(f"‚úÖ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–∑–∞–ø—Ä–µ—â–µ–Ω–æ): {response.status_code}")
                else:
                    print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {response.status_code}")
            else:  # –ï—Å–ª–∏ —É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
                if response.status_code == 200:
                    print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                else:
                    print(f"‚ö†Ô∏è  –î–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                    
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–æ–∫–µ–Ω—É: {e}")
        
        # –¢–µ—Å—Ç 2: –î–æ—Å—Ç—É–ø –ø–æ —Å—Ç–∞—Ä–æ–º—É ID –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å (–µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        old_id_url = f"{base_url}/result/{result_id}"
        try:
            response = requests.get(old_id_url, timeout=5)
            if response.status_code == 404:
                print(f"‚úÖ –°—Ç–∞—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ ID –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {response.status_code}")
            else:
                print(f"‚ö†Ô∏è  –°—Ç–∞—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ ID –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚úÖ –°—Ç–∞—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    conn.close()
    
    print("\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return True

def check_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ access_token
    c.execute("PRAGMA table_info(result)")
    columns = [column[1] for column in c.fetchall()]
    
    if 'access_token' in columns:
        print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ access_token —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ access_token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç —Ç–æ–∫–µ–Ω—ã
    c.execute('SELECT COUNT(*) FROM result WHERE access_token IS NULL')
    null_tokens = c.fetchone()[0]
    
    if null_tokens == 0:
        print("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞")
    else:
        print(f"‚ö†Ô∏è  {null_tokens} –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
    c.execute('SELECT COUNT(DISTINCT access_token) as unique_tokens, COUNT(*) as total FROM result WHERE access_token IS NOT NULL')
    unique_tokens, total = c.fetchone()
    
    if unique_tokens == total:
        print("‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã")
    else:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã: {unique_tokens} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑ {total}")
    
    conn.close()
    return True

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    if not check_database_structure():
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
    if not test_access_tokens():
        sys.exit(1)
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")