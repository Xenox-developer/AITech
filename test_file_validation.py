#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
"""

import os
import sys
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent))

from app import allowed_file, validate_file_content, _check_file_signature, _is_compatible_mime_type

def create_test_files():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    test_files = []
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    temp_dir = tempfile.mkdtemp()
    
    # 1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π PDF —Ñ–∞–π–ª (—Å PDF –∑–∞–≥–æ–ª–æ–≤–∫–æ–º)
    pdf_file = os.path.join(temp_dir, "test.pdf")
    with open(pdf_file, 'wb') as f:
        f.write(b'%PDF-1.4\n%Test PDF content')
    test_files.append(("test.pdf", pdf_file, "PDF", True))
    
    # 2. –§–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º PDF, –Ω–æ –±–µ–∑ PDF –∑–∞–≥–æ–ª–æ–≤–∫–∞
    fake_pdf = os.path.join(temp_dir, "fake.pdf")
    with open(fake_pdf, 'wb') as f:
        f.write(b'This is not a PDF file')
    test_files.append(("fake.pdf", fake_pdf, "Fake PDF", False))
    
    # 3. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π MP4 —Ñ–∞–π–ª (—Å ftyp –∑–∞–≥–æ–ª–æ–≤–∫–æ–º)
    mp4_file = os.path.join(temp_dir, "test.mp4")
    with open(mp4_file, 'wb') as f:
        f.write(b'\x00\x00\x00\x20ftypmp41\x00\x00\x00\x00mp41isom')
    test_files.append(("test.mp4", mp4_file, "MP4", True))
    
    # 4. –§–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º MP4, –Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    fake_mp4 = os.path.join(temp_dir, "fake.mp4")
    with open(fake_mp4, 'wb') as f:
        f.write(b'This is not an MP4 file')
    test_files.append(("fake.mp4", fake_mp4, "Fake MP4", False))
    
    # 5. MOV —Ñ–∞–π–ª
    mov_file = os.path.join(temp_dir, "test.mov")
    with open(mov_file, 'wb') as f:
        f.write(b'\x00\x00\x00\x14ftypqt  ')
    test_files.append(("test.mov", mov_file, "MOV", True))
    
    # 6. MKV —Ñ–∞–π–ª
    mkv_file = os.path.join(temp_dir, "test.mkv")
    with open(mkv_file, 'wb') as f:
        f.write(b'\x1a\x45\xdf\xa3\x93\x42\x82\x88matroska')
    test_files.append(("test.mkv", mkv_file, "MKV", True))
    
    # 7. –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    txt_file = os.path.join(temp_dir, "test.txt")
    with open(txt_file, 'w') as f:
        f.write("This is a text file")
    test_files.append(("test.txt", txt_file, "TXT", False))
    
    # 8. –§–∞–π–ª –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    no_ext_file = os.path.join(temp_dir, "noextension")
    with open(no_ext_file, 'wb') as f:
        f.write(b'%PDF-1.4\nPDF without extension')
    test_files.append(("noextension", no_ext_file, "No extension", False))
    
    return test_files, temp_dir

def test_allowed_file():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é allowed_file"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò allowed_file()")
    print("=" * 50)
    
    test_cases = [
        ("document.pdf", True),
        ("video.mp4", True),
        ("movie.mov", True),
        ("video.mkv", True),
        ("document.PDF", True),  # –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
        ("video.MP4", True),
        ("document.txt", False),
        ("image.jpg", False),
        ("archive.zip", False),
        ("", False),
        ("noextension", False),
        (".pdf", True),  # –¢–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        ("file.", False),  # –¢–æ—á–∫–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        ("file.pdf.txt", False),  # –î–≤–æ–π–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    ]
    
    passed = 0
    total = len(test_cases)
    
    for filename, expected in test_cases:
        result = allowed_file(filename)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} {filename:<20} -> {result:<5} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
        if result == expected:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    return passed == total

def test_file_signature():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é _check_file_signature"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò _check_file_signature()")
    print("=" * 50)
    
    test_cases = [
        (b'%PDF-1.4\nContent', 'pdf', True, 'PDF'),
        (b'Not a PDF', 'pdf', False, None),
        (b'\x00\x00\x00\x20ftypmp41', 'mp4', True, 'MP4/MOV'),
        (b'Not a video', 'mp4', False, None),
        (b'\x1a\x45\xdf\xa3', 'mkv', True, 'MKV'),
        (b'Not MKV', 'mkv', False, None),
    ]
    
    passed = 0
    total = len(test_cases)
    
    for content, ext, expected_valid, expected_type in test_cases:
        is_valid, detected_type = _check_file_signature(content, ext)
        status = "‚úÖ" if (is_valid == expected_valid and detected_type == expected_type) else "‚ùå"
        print(f"{status} {ext.upper():<4} signature -> valid: {is_valid}, type: {detected_type}")
        if is_valid == expected_valid and detected_type == expected_type:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    return passed == total

def test_mime_compatibility():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é _is_compatible_mime_type"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò _is_compatible_mime_type()")
    print("=" * 50)
    
    test_cases = [
        ('application/pdf', 'pdf', True),
        ('application/x-pdf', 'pdf', True),
        ('text/pdf', 'pdf', True),
        ('video/mp4', 'mp4', True),
        ('video/x-mp4', 'mp4', True),
        ('video/quicktime', 'mov', True),
        ('video/x-matroska', 'mkv', True),
        ('text/plain', 'pdf', False),
        ('image/jpeg', 'mp4', False),
    ]
    
    passed = 0
    total = len(test_cases)
    
    for mime_type, ext, expected in test_cases:
        result = _is_compatible_mime_type(mime_type, ext)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} {mime_type:<25} + {ext:<4} -> {result}")
        if result == expected:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    return passed == total

def test_file_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    test_files, temp_dir = create_test_files()
    
    passed = 0
    total = len(test_files)
    
    for filename, filepath, description, should_be_valid in test_files:
        try:
            # –¢–µ—Å—Ç allowed_file
            extension_valid = allowed_file(filename)
            
            # –¢–µ—Å—Ç validate_file_content
            if extension_valid:
                with open(filepath, 'rb') as f:
                    class MockFile:
                        def __init__(self, file_obj):
                            self.file_obj = file_obj
                            self.content = file_obj.read()
                            file_obj.seek(0)
                        
                        def seek(self, pos):
                            self.file_obj.seek(pos)
                        
                        def read(self, size=-1):
                            return self.file_obj.read(size)
                    
                    mock_file = MockFile(f)
                    is_valid, warning = validate_file_content(mock_file, filename)
                    
                    overall_valid = extension_valid and is_valid
                    
                    status = "‚úÖ" if (overall_valid == should_be_valid or not should_be_valid) else "‚ùå"
                    warning_text = f" (‚ö†Ô∏è {warning})" if warning else ""
                    
                    print(f"{status} {description:<15} ({filename:<12}) -> ext: {extension_valid}, content: {is_valid}{warning_text}")
                    
                    if overall_valid == should_be_valid or (not should_be_valid and not overall_valid):
                        passed += 1
            else:
                status = "‚úÖ" if not should_be_valid else "‚ùå"
                print(f"{status} {description:<15} ({filename:<12}) -> —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                if not should_be_valid:
                    passed += 1
                    
        except Exception as e:
            print(f"‚ùå {description:<15} ({filename:<12}) -> –û–®–ò–ë–ö–ê: {str(e)}")
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    import shutil
    shutil.rmtree(temp_dir)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    return passed == total

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò –§–ê–ô–õ–û–í")
    print("=" * 60)
    
    results = []
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    results.append(test_allowed_file())
    results.append(test_file_signature())
    results.append(test_mime_compatibility())
    results.append(test_file_validation())
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    
    test_names = [
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä —Ñ–∞–π–ª–æ–≤", 
        "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å MIME-—Ç–∏–ø–æ–≤",
        "–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤"
    ]
    
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{name}: {status}")
    
    success_rate = sum(results) / len(results) * 100
    print(f"\n–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    if all(results):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüí° –£–ª—É—á—à–µ–Ω–∏—è:")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤")
        print("   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º")
        print("   ‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å MIME-—Ç–∏–ø–æ–≤")
        print("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        print("   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.")
    
    return all(results)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)