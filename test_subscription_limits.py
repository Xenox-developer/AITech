#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏
"""
import sqlite3
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from subscription_manager import subscription_manager, SUBSCRIPTION_PLANS
from auth import User

def test_subscription_limits():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user = User.create("test_limits@example.com", "Test User", "password123")
    if not test_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
        test_user = User.get_by_email("test_limits@example.com")
    
    user_id = test_user.id
    print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user.email} (ID: {user_id})")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
    for plan_name, limits in SUBSCRIPTION_PLANS.items():
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞: {plan_name.upper()}")
        print("-" * 30)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = subscription_manager.upgrade_subscription(user_id, plan_name)
        print(f"‚úÖ –ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: {success}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription = subscription_manager.get_user_subscription(user_id)
        print(f"üìä –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: {subscription['type']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤
        print(f"üîç –õ–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤: {limits.monthly_analyses if limits.monthly_analyses != -1 else '–±–µ–∑–ª–∏–º–∏—Ç–Ω–æ'}")
        allowed, message = subscription_manager.check_analysis_limit(user_id)
        print(f"   –†–∞–∑—Ä–µ—à–µ–Ω –∞–Ω–∞–ª–∏–∑: {allowed}")
        if message:
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç PDF —Å—Ç—Ä–∞–Ω–∏—Ü
        test_pages = [5, 20, 50, 100]
        for pages in test_pages:
            allowed, message = subscription_manager.check_pdf_pages_limit(user_id, pages)
            status = "‚úÖ" if allowed else "‚ùå"
            print(f"   PDF {pages} —Å—Ç—Ä–∞–Ω–∏—Ü: {status}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç –≤–∏–¥–µ–æ
        test_minutes = [10, 60, 120, 180]
        for minutes in test_minutes:
            allowed, message = subscription_manager.check_video_duration_limit(user_id, minutes)
            status = "‚úÖ" if allowed else "‚ùå"
            print(f"   –í–∏–¥–µ–æ {minutes} –º–∏–Ω: {status}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç AI —á–∞—Ç–∞
        allowed, message = subscription_manager.check_ai_chat_limit(user_id)
        print(f"   AI —á–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω: {'‚úÖ' if allowed else '‚ùå'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
        test_features = ['basic_flashcards', 'advanced_flashcards', 'mind_maps', 'interactive_mind_maps', 'api_access']
        print("   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        for feature in test_features:
            has_access = subscription_manager.check_feature_access(user_id, feature)
            status = "‚úÖ" if has_access else "‚ùå"
            print(f"     {feature}: {status}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print(f"\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("-" * 30)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    subscription_manager.record_usage(user_id, 'analysis', 1, 'test_file.pdf')
    subscription_manager.record_usage(user_id, 'pdf_pages', 10, 'test_file.pdf')
    subscription_manager.record_usage(user_id, 'ai_chat', 5, 'test_conversation')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    usage_stats = subscription_manager.get_usage_stats(user_id)
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    print(f"   –ê–Ω–∞–ª–∏–∑—ã: {usage_stats['analyses']['used']}/{usage_stats['analyses']['limit'] if not usage_stats['analyses']['unlimited'] else '‚àû'}")
    print(f"   AI —á–∞—Ç: {usage_stats['ai_chat']['used']}/{usage_stats['ai_chat']['limit'] if not usage_stats['ai_chat']['unlimited'] else '‚àû'}")
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

def cleanup_test_data():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        c.execute('DELETE FROM subscription_usage WHERE user_id IN (SELECT id FROM users WHERE email = ?)', 
                 ('test_limits@example.com',))
        c.execute('DELETE FROM subscription_history WHERE user_id IN (SELECT id FROM users WHERE email = ?)', 
                 ('test_limits@example.com',))
        c.execute('DELETE FROM users WHERE email = ?', ('test_limits@example.com',))
        
        conn.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == '__main__':
    try:
        test_subscription_limits()
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
        cleanup = input("\n–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ").lower().strip()
        if cleanup in ['y', 'yes', '–¥–∞']:
            cleanup_test_data()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()