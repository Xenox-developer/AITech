#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π PPTX —Ñ–∞–π–ª–æ–≤
"""

import os
import sys
import sqlite3
import tempfile
from pathlib import Path
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from subscription_manager import subscription_manager, SUBSCRIPTION_PLANS

def create_test_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_db:
        test_db_path = tmp_db.name
    
    conn = sqlite3.connect(test_db_path)
    c = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''
        CREATE TABLE users (
            id INTEGER PRIMARY KEY,
            email TEXT UNIQUE,
            subscription_type TEXT DEFAULT 'starter',
            subscription_status TEXT DEFAULT 'active',
            monthly_analyses_used INTEGER DEFAULT 0,
            monthly_reset_date TEXT,
            total_pdf_pages_used INTEGER DEFAULT 0,
            total_video_minutes_used INTEGER DEFAULT 0,
            ai_chat_messages_used INTEGER DEFAULT 0,
            monthly_video_uploads_used INTEGER DEFAULT 0,
            subscription_start_date TEXT,
            subscription_end_date TEXT
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = [
        (1, 'freemium@test.com', 'freemium'),
        (2, 'lite@test.com', 'lite'),
        (3, 'starter@test.com', 'starter'),
        (4, 'basic@test.com', 'basic'),
        (5, 'pro@test.com', 'pro')
    ]
    
    for user_id, email, plan in test_users:
        c.execute('''
            INSERT INTO users (id, email, subscription_type)
            VALUES (?, ?, ?)
        ''', (user_id, email, plan))
    
    conn.commit()
    conn.close()
    
    return test_db_path

def test_subscription_manager_pptx_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ PPTX —á–µ—Ä–µ–∑ subscription_manager"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ subscription_manager.check_pptx_support()...")
    
    test_db_path = create_test_database()
    original_db_path = subscription_manager.db_path
    subscription_manager.db_path = test_db_path
    
    try:
        results = {}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞–Ω
        for user_id in range(1, 6):
            user_subscription = subscription_manager.get_user_subscription(user_id)
            plan = user_subscription['type']
            
            allowed, message = subscription_manager.check_pptx_support(user_id)
            expected = SUBSCRIPTION_PLANS[plan].pptx_support
            
            results[plan] = {
                'allowed': allowed,
                'expected': expected,
                'message': message,
                'passed': allowed == expected
            }
            
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if allowed == expected else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"  {plan.upper()}: {status} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected}, –ø–æ–ª—É—á–µ–Ω–æ: {allowed})")
            if message and not allowed:
                print(f"    –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        all_passed = all(r['passed'] for r in results.values())
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if all_passed else '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò'}")
        
        return all_passed
        
    finally:
        subscription_manager.db_path = original_db_path
        try:
            os.unlink(test_db_path)
        except:
            pass

def test_file_upload_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ app.py
    from app import allowed_file
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ allowed_file
    test_files = [
        ('document.pdf', True),
        ('presentation.pptx', True),
        ('video.mp4', True),
        ('video.mov', True),
        ('video.mkv', True),
        ('document.doc', False),
        ('image.jpg', False),
        ('text.txt', False),
    ]
    
    print("  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ allowed_file():")
    all_passed = True
    
    for filename, expected in test_files:
        result = allowed_file(filename)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"    {filename}: {status} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected}, –ø–æ–ª—É—á–µ–Ω–æ: {result})")
        if result != expected:
            all_passed = False
    
    return all_passed

def test_template_rendering():
    """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å —É—Å–ª–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π PPTX"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –≤ —à–∞–±–ª–æ–Ω–∞—Ö...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏
    test_cases = [
        {
            'plan': 'freemium',
            'pptx_support': False,
            'expected_accept': '.pdf,.mp4,.mov,.mkv',
            'expected_pptx_disabled': True
        },
        {
            'plan': 'lite',
            'pptx_support': False,
            'expected_accept': '.pdf,.mp4,.mov,.mkv',
            'expected_pptx_disabled': True
        },
        {
            'plan': 'starter',
            'pptx_support': True,
            'expected_accept': '.pdf,.pptx,.mp4,.mov,.mkv',
            'expected_pptx_disabled': False
        },
        {
            'plan': 'basic',
            'pptx_support': True,
            'expected_accept': '.pdf,.pptx,.mp4,.mov,.mkv',
            'expected_pptx_disabled': False
        },
        {
            'plan': 'pro',
            'pptx_support': True,
            'expected_accept': '.pdf,.pptx,.mp4,.mov,.mkv',
            'expected_pptx_disabled': False
        }
    ]
    
    all_passed = True
    
    for case in test_cases:
        plan = case['plan']
        pptx_support = case['pptx_support']
        expected_accept = case['expected_accept']
        expected_disabled = case['expected_pptx_disabled']
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ —à–∞–±–ª–æ–Ω–∞
        if pptx_support:
            actual_accept = '.pdf,.pptx,.mp4,.mov,.mkv'
            actual_disabled = False
        else:
            actual_accept = '.pdf,.mp4,.mov,.mkv'
            actual_disabled = True
        
        accept_correct = actual_accept == expected_accept
        disabled_correct = actual_disabled == expected_disabled
        
        status = "‚úÖ" if (accept_correct and disabled_correct) else "‚ùå"
        print(f"  {plan.upper()}: {status}")
        print(f"    Accept –∞—Ç—Ä–∏–±—É—Ç: {actual_accept}")
        print(f"    PPTX –æ—Ç–∫–ª—é—á–µ–Ω: {actual_disabled}")
        
        if not (accept_correct and disabled_correct):
            all_passed = False
    
    return all_passed

def test_error_messages():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö...")
    
    test_db_path = create_test_database()
    original_db_path = subscription_manager.db_path
    subscription_manager.db_path = test_db_path
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ PPTX
        test_users = [
            (1, 'freemium'),
            (2, 'lite')
        ]
        
        expected_message = "–ó–∞–≥—Ä—É–∑–∫–∞ PPTX —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–ª–∞–Ω–∞—Ö STARTER, BASIC –∏ PRO. –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        
        all_passed = True
        
        for user_id, plan in test_users:
            allowed, message = subscription_manager.check_pptx_support(user_id)
            
            if allowed:
                print(f"  ‚ùå {plan.upper()}: –û—à–∏–±–∫–∞ - PPTX —Ä–∞–∑—Ä–µ—à–µ–Ω, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å")
                all_passed = False
            elif message != expected_message:
                print(f"  ‚ùå {plan.upper()}: –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
                print(f"    –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_message}")
                print(f"    –ü–æ–ª—É—á–µ–Ω–æ: {message}")
                all_passed = False
            else:
                print(f"  ‚úÖ {plan.upper()}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
        
        return all_passed
        
    finally:
        subscription_manager.db_path = original_db_path
        try:
            os.unlink(test_db_path)
        except:
            pass

def test_plan_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤...")
    
    expected_pptx_support = {
        'freemium': False,
        'lite': False,
        'starter': True,
        'basic': True,
        'pro': True
    }
    
    all_passed = True
    
    for plan, expected in expected_pptx_support.items():
        if plan in SUBSCRIPTION_PLANS:
            actual = SUBSCRIPTION_PLANS[plan].pptx_support
            status = "‚úÖ" if actual == expected else "‚ùå"
            print(f"  {plan.upper()}: {status} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected}, –ø–æ–ª—É—á–µ–Ω–æ: {actual})")
            if actual != expected:
                all_passed = False
        else:
            print(f"  ‚ùå {plan.upper()}: –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            all_passed = False
    
    return all_passed

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è PPTX...")
    print("=" * 70)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤", test_plan_configuration),
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫", test_subscription_manager_pptx_check),
        ("–õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤", test_file_upload_logic),
        ("–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–æ–≤", test_template_rendering),
        ("–°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö", test_error_messages)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 70)
    
    all_passed = True
    for test_name, passed in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if passed else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{test_name}: {status}")
        if not passed:
            all_passed = False
    
    print("=" * 70)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PPTX –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\n‚úÖ –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:")
        print("  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ FREE –∏ LITE –Ω–µ –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å PPTX —Ñ–∞–π–ª—ã")
        print("  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ STARTER, BASIC –∏ PRO –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å PPTX —Ñ–∞–π–ª—ã")
        print("  ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
        print("  ‚Ä¢ –£—Å–ª–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ PPTX –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
        print("  ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã accept –≤ —Ñ–æ—Ä–º–µ –∑–∞–≥—Ä—É–∑–∫–∏")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
        return False
    
    return True

if __name__ == '__main__':
    success = run_all_tests()
    sys.exit(0 if success else 1)