"""
–£–º–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∞–ø–≥—Ä–µ–π–¥–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
"""
import sqlite3
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
import logging

logger = logging.getLogger(__name__)

@dataclass
class UpgradeOffer:
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–ø–≥—Ä–µ–π–¥–∞"""
    title: str
    message: str
    discount: int  # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
    urgency: str   # low, medium, high
    social_proof: str
    cta_text: str
    valid_until: datetime
    trigger_reason: str

class SmartUpgradeTriggers:
    """–°–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–æ–≤"""
    
    def __init__(self, db_path: str = 'ai_study.db'):
        self.db_path = db_path
    
    def analyze_user_behavior(self, user_id: int) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∞–ø–≥—Ä–µ–π–¥—É"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        since_date = datetime.now() - timedelta(days=30)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        c.execute('''
            SELECT 
                COUNT(*) as total_analyses,
                COUNT(DISTINCT DATE(created_at)) as active_days,
                AVG(LENGTH(full_text)) as avg_content_length
            FROM result 
            WHERE user_id = ? AND created_at >= ?
        ''', (user_id, since_date))
        
        activity = c.fetchone()
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI —á–∞—Ç–∞
        c.execute('''
            SELECT COUNT(*) as chat_messages
            FROM chat_history 
            WHERE user_id = ? AND created_at >= ?
        ''', (user_id, since_date))
        
        chat_usage = c.fetchone()[0] or 0
        
        # –†–∞–±–æ—Ç–∞ —Å —Ñ–ª–µ—à-–∫–∞—Ä—Ç–∞–º–∏
        c.execute('''
            SELECT 
                COUNT(*) as reviews,
                AVG(consecutive_correct) as avg_accuracy,
                COUNT(DISTINCT result_id) as unique_materials
            FROM user_progress 
            WHERE user_id = ? AND last_review >= ?
        ''', (user_id, since_date))
        
        flashcard_stats = c.fetchone()
        
        # –ü–æ–ø—ã—Ç–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        c.execute('''
            SELECT COUNT(*) as limit_hits
            FROM subscription_usage 
            WHERE user_id = ? AND created_at >= ? 
            AND resource_info LIKE '%limit_exceeded%'
        ''', (user_id, since_date))
        
        limit_hits = c.fetchone()[0] or 0
        
        # –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω –∏ –ª–∏–º–∏—Ç—ã
        c.execute('''
            SELECT 
                subscription_type,
                monthly_analyses_used,
                ai_chat_messages_used,
                created_at as registration_date
            FROM users 
            WHERE id = ?
        ''', (user_id,))
        
        user_info = c.fetchone()
        
        conn.close()
        
        return {
            'total_analyses': activity[0] or 0,
            'active_days': activity[1] or 0,
            'avg_content_length': activity[2] or 0,
            'chat_messages': chat_usage,
            'flashcard_reviews': flashcard_stats[0] or 0,
            'flashcard_accuracy': flashcard_stats[1] or 0,
            'unique_materials': flashcard_stats[2] or 0,
            'limit_hits': limit_hits,
            'current_plan': user_info[0] if user_info else 'freemium',
            'analyses_used': user_info[1] if user_info else 0,
            'chat_used': user_info[2] if user_info else 0,
            'days_since_registration': (datetime.now() - datetime.fromisoformat(user_info[4])).days if user_info and len(user_info) > 4 and user_info[4] else 0
        }
    
    def calculate_upgrade_readiness_score(self, behavior: Dict) -> float:
        """–†–∞—Å—á–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∞–ø–≥—Ä–µ–π–¥—É (0-1)"""
        score = 0.0
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (0-0.3)
        if behavior['active_days'] >= 20:
            score += 0.3
        elif behavior['active_days'] >= 10:
            score += 0.2
        elif behavior['active_days'] >= 5:
            score += 0.1
        
        # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (0-0.25)
        if behavior['total_analyses'] >= 15:
            score += 0.25
        elif behavior['total_analyses'] >= 8:
            score += 0.15
        elif behavior['total_analyses'] >= 3:
            score += 0.1
        
        # –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–µ (0-0.2)
        if behavior['flashcard_reviews'] >= 50:
            score += 0.2
        elif behavior['flashcard_reviews'] >= 20:
            score += 0.15
        elif behavior['flashcard_reviews'] >= 5:
            score += 0.1
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI —á–∞—Ç–∞ (0-0.15)
        if behavior['chat_messages'] >= 30:
            score += 0.15
        elif behavior['chat_messages'] >= 10:
            score += 0.1
        elif behavior['chat_messages'] >= 3:
            score += 0.05
        
        # –ü–æ–ø—ã—Ç–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ (0-0.1)
        if behavior['limit_hits'] >= 5:
            score += 0.1
        elif behavior['limit_hits'] >= 2:
            score += 0.05
        
        return min(score, 1.0)
    
    def get_upgrade_triggers(self, user_id: int) -> List[UpgradeOffer]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞"""
        behavior = self.analyze_user_behavior(user_id)
        readiness_score = self.calculate_upgrade_readiness_score(behavior)
        current_plan = behavior['current_plan']
        
        triggers = []
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è FREEMIUM ‚Üí LITE
        if current_plan == 'freemium':
            triggers.extend(self._get_freemium_triggers(behavior, readiness_score))
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è LITE ‚Üí STARTER
        elif current_plan == 'lite':
            triggers.extend(self._get_lite_triggers(behavior, readiness_score))
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è STARTER ‚Üí BASIC
        elif current_plan == 'starter':
            triggers.extend(self._get_starter_triggers(behavior, readiness_score))
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è BASIC ‚Üí PRO
        elif current_plan == 'basic':
            triggers.extend(self._get_basic_triggers(behavior, readiness_score))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å * —Å—Ä–æ—á–Ω–æ—Å—Ç—å)
        triggers.sort(key=lambda x: self._calculate_priority(x, readiness_score), reverse=True)
        
        return triggers[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    
    def _get_freemium_triggers(self, behavior: Dict, readiness_score: float) -> List[UpgradeOffer]:
        """–¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π FREEMIUM"""
        triggers = []
        
        # –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if behavior['active_days'] >= 7 and behavior['total_analyses'] >= 2:
            triggers.append(UpgradeOffer(
                title="üöÄ –í—ã –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!",
                message=f"–ó–∞ {behavior['active_days']} –¥–Ω–µ–π –≤—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ {behavior['total_analyses']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–ª–∞–Ω LITE –¥–∞—Å—Ç –≤–∞–º –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤—Å–µ–≥–æ –∑–∞ ‚ÇΩ11/–¥–µ–Ω—å!",
                discount=30,
                urgency="medium",
                social_proof="87% –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–±–∏—Ä–∞—é—Ç –ø–ª–∞–Ω LITE",
                cta_text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å LITE 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                valid_until=datetime.now() + timedelta(days=3),
                trigger_reason="high_activity"
            ))
        
        # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
        if behavior['limit_hits'] >= 2:
            triggers.append(UpgradeOffer(
                title="‚ö° –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ —Å–µ–±—è!",
                message=f"–í—ã {behavior['limit_hits']} —Ä–∞–∑ –¥–æ—Å—Ç–∏–≥–∞–ª–∏ –ª–∏–º–∏—Ç–æ–≤. –ü–ª–∞–Ω LITE —É–≤–µ–ª–∏—á–∏—Ç –≤–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ 3 —Ä–∞–∑–∞ –∏ –æ—Ç–∫—Ä–æ–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
                discount=40,
                urgency="high",
                social_proof="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ LITE –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –Ω–∞ 250% –±–æ–ª—å—à–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                cta_text="–£–±—Ä–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞ ‚ÇΩ79/–Ω–µ–¥–µ–ª—è",
                valid_until=datetime.now() + timedelta(hours=24),
                trigger_reason="limit_exceeded"
            ))
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∞–ø–≥—Ä–µ–π–¥–∞
        if behavior['days_since_registration'] >= 14 and behavior['total_analyses'] >= 1:
            triggers.append(UpgradeOffer(
                title="üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!",
                message=f"–í—ã —Å –Ω–∞–º–∏ —É–∂–µ {behavior['days_since_registration']} –¥–Ω–µ–π! –ö–∞–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å - —Å–∫–∏–¥–∫–∞ 50% –Ω–∞ –ø–ª–∞–Ω LITE –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü.",
                discount=50,
                urgency="low",
                social_proof="–¢–æ–ª—å–∫–æ –¥–ª—è –ª–æ—è–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                cta_text="–ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É 50%",
                valid_until=datetime.now() + timedelta(days=7),
                trigger_reason="loyalty_bonus"
            ))
        
        return triggers
    
    def _get_lite_triggers(self, behavior: Dict, readiness_score: float) -> List[UpgradeOffer]:
        """–¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π LITE"""
        triggers = []
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PPTX
        if behavior['limit_hits'] >= 1:
            triggers.append(UpgradeOffer(
                title="üìä –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ PPTX –∞–Ω–∞–ª–∏–∑!",
                message="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç 40% –±–æ–ª—å—à–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–ª–∞–Ω STARTER –æ—Ç–∫—Ä–æ–µ—Ç PPTX –∞–Ω–∞–ª–∏–∑ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É.",
                discount=25,
                urgency="medium",
                social_proof="73% —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç PPTX –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è",
                cta_text="–û—Ç–∫—Ä—ã—Ç—å PPTX –∑–∞ ‚Çπ149/–Ω–µ–¥–µ–ª—è",
                valid_until=datetime.now() + timedelta(days=2),
                trigger_reason="pptx_needed"
            ))
        
        # –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI —á–∞—Ç–∞
        if behavior['chat_messages'] >= 40:
            triggers.append(UpgradeOffer(
                title="ü§ñ –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ò–ò?",
                message=f"–í—ã –∑–∞–¥–∞–ª–∏ {behavior['chat_messages']} –≤–æ–ø—Ä–æ—Å–æ–≤! –ü–ª–∞–Ω STARTER –¥–∞—Å—Ç –≤–∞–º 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è.",
                discount=20,
                urgency="medium",
                social_proof="–°—Ç—É–¥–µ–Ω—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —á–∞—Ç–æ–º —É—á–∞—Ç—Å—è –Ω–∞ 60% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ",
                cta_text="–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –æ—Ç–≤–µ—Ç–æ–≤",
                valid_until=datetime.now() + timedelta(days=3),
                trigger_reason="chat_heavy_user"
            ))
        
        return triggers
    
    def _get_starter_triggers(self, behavior: Dict, readiness_score: float) -> List[UpgradeOffer]:
        """–¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π STARTER"""
        triggers = []
        
        # –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–æ–≤
        if behavior['analyses_used'] >= 12:
            triggers.append(UpgradeOffer(
                title="üìö –ì–æ—Ç–æ–≤—ã –∫ –±–æ–ª—å—à–µ–º—É?",
                message=f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {behavior['analyses_used']} –∏–∑ 15 –∞–Ω–∞–ª–∏–∑–æ–≤. –ü–ª–∞–Ω BASIC –¥–∞—Å—Ç –≤–∞–º 40 –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É.",
                discount=15,
                urgency="medium",
                social_proof="–¢–æ–ø-—Å—Ç—É–¥–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç 25+ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –º–µ—Å—è—Ü",
                cta_text="–£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–æ 40",
                valid_until=datetime.now() + timedelta(days=5),
                trigger_reason="high_usage"
            ))
        
        # –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–ª–µ—à-–∫–∞—Ä—Ç–∞–º–∏
        if behavior['flashcard_reviews'] >= 100 and behavior['flashcard_accuracy'] >= 0.8:
            triggers.append(UpgradeOffer(
                title="üéì –í—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä—É–µ—Ç–µ!",
                message=f"–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {behavior['flashcard_reviews']} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é {behavior['flashcard_accuracy']:.0%}! –ü–ª–∞–Ω BASIC –æ—Ç–∫—Ä–æ–µ—Ç –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.",
                discount=20,
                urgency="low",
                social_proof="–°—Ç—É–¥–µ–Ω—Ç—ã —Å –ø–ª–∞–Ω–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è —É–ª—É—á—à–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ 45%",
                cta_text="–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è",
                valid_until=datetime.now() + timedelta(days=7),
                trigger_reason="learning_progress"
            ))
        
        return triggers
    
    def _get_basic_triggers(self, behavior: Dict, readiness_score: float) -> List[UpgradeOffer]:
        """–¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π BASIC"""
        triggers = []
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        if behavior['limit_hits'] >= 3:
            triggers.append(UpgradeOffer(
                title="üöÄ –í—Ä–µ–º—è –¥–ª—è PRO!",
                message=f"–í—ã {behavior['limit_hits']} —Ä–∞–∑ –¥–æ—Å—Ç–∏–≥–∞–ª–∏ –ª–∏–º–∏—Ç–æ–≤. –ü–ª–∞–Ω PRO –¥–∞—Å—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ API –¥–æ—Å—Ç—É–ø.",
                discount=10,
                urgency="high",
                social_proof="PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                cta_text="–ü–æ–ª—É—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç",
                valid_until=datetime.now() + timedelta(days=1),
                trigger_reason="power_user"
            ))
        
        # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        if behavior['total_analyses'] >= 30 and behavior['unique_materials'] >= 20:
            triggers.append(UpgradeOffer(
                title="üíº –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
                message="–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–æ–≤–æ—Ä–∏—Ç –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏. PRO –ø–ª–∞–Ω –≤–∫–ª—é—á–∞–µ—Ç API –¥–æ—Å—Ç—É–ø –∏ –±–µ–ª—ã–π –ª–µ–π–±–ª.",
                discount=15,
                urgency="low",
                social_proof="–í—ã–±–æ—Ä 89% –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                cta_text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                valid_until=datetime.now() + timedelta(days=10),
                trigger_reason="corporate_usage"
            ))
        
        return triggers
    
    def _calculate_priority(self, offer: UpgradeOffer, readiness_score: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        urgency_weights = {'low': 0.3, 'medium': 0.6, 'high': 1.0}
        urgency_weight = urgency_weights.get(offer.urgency, 0.5)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
        discount_factor = min(offer.discount / 100, 0.5)
        
        return readiness_score * urgency_weight + discount_factor
    
    def record_trigger_shown(self, user_id: int, trigger_reason: str, offer_details: Dict):
        """–ó–∞–ø–∏—Å—å –ø–æ–∫–∞–∑–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        c.execute('''
            INSERT INTO upgrade_triggers_log 
            (user_id, trigger_reason, offer_details, shown_at)
            VALUES (?, ?, ?, ?)
        ''', (user_id, trigger_reason, json.dumps(offer_details), datetime.now()))
        
        conn.commit()
        conn.close()
    
    def record_trigger_action(self, user_id: int, trigger_reason: str, action: str):
        """–ó–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
        c.execute('''
            SELECT id FROM upgrade_triggers_log 
            WHERE user_id = ? AND trigger_reason = ? AND action IS NULL
            ORDER BY shown_at DESC LIMIT 1
        ''', (user_id, trigger_reason))
        
        row = c.fetchone()
        if row:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
            c.execute('''
                UPDATE upgrade_triggers_log 
                SET action = ?, action_at = ?
                WHERE id = ?
            ''', (action, datetime.now(), row[0]))
        
        conn.commit()
        conn.close()
    
    def get_trigger_analytics(self, days: int = 30) -> Dict:
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        since_date = datetime.now() - timedelta(days=days)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        c.execute('''
            SELECT 
                trigger_reason,
                COUNT(*) as shown_count,
                COUNT(CASE WHEN action = 'upgraded' THEN 1 END) as converted_count,
                COUNT(CASE WHEN action = 'dismissed' THEN 1 END) as dismissed_count,
                AVG(CASE WHEN action = 'upgraded' THEN 1.0 ELSE 0.0 END) as conversion_rate
            FROM upgrade_triggers_log 
            WHERE shown_at >= ?
            GROUP BY trigger_reason
            ORDER BY conversion_rate DESC
        ''', (since_date,))
        
        trigger_stats = []
        for row in c.fetchall():
            trigger_stats.append({
                'trigger_reason': row[0],
                'shown_count': row[1],
                'converted_count': row[2],
                'dismissed_count': row[3],
                'conversion_rate': row[4]
            })
        
        conn.close()
        
        return {
            'trigger_stats': trigger_stats,
            'period_days': days
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def init_trigger_tables():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    c.execute('''
        CREATE TABLE IF NOT EXISTS upgrade_triggers_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            trigger_reason TEXT NOT NULL,
            offer_details TEXT,
            shown_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            action TEXT,  -- 'upgraded', 'dismissed', 'clicked'
            action_at TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id)
        )
    ''')
    
    # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    c.execute('CREATE INDEX IF NOT EXISTS idx_triggers_user_date ON upgrade_triggers_log(user_id, shown_at)')
    
    conn.commit()
    conn.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
smart_triggers = SmartUpgradeTriggers()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
try:
    init_trigger_tables()
except Exception as e:
    logger.warning(f"Could not initialize trigger tables: {e}")