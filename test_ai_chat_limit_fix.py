#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞ AI —á–∞—Ç–∞
"""
import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_ai_chat_limit_fix():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ AI —á–∞—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ AI —á–∞—Ç–∞")
    print("=" * 50)
    
    try:
        from app import app
        from auth import User
        from subscription_manager import subscription_manager
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = User.create("chat_limit_fix@example.com", "Chat Limit Fix", "password123")
        if not test_user:
            test_user = User.get_by_email("chat_limit_fix@example.com")
        
        user_id = test_user.id
        print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user.email} (ID: {user_id})")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω STARTER (–ª–∏–º–∏—Ç 5 —Å–æ–æ–±—â–µ–Ω–∏–π)
        success = subscription_manager.upgrade_subscription(user_id, 'starter')
        print(f"‚úÖ –ü–ª–∞–Ω STARTER —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {success}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI —á–∞—Ç–∞
        import sqlite3
        conn = sqlite3.connect('ai_study.db')
        c = conn.cursor()
        c.execute('UPDATE users SET ai_chat_messages_used = 0 WHERE id = ?', (user_id,))
        conn.commit()
        conn.close()
        print("üîÑ –°—á–µ—Ç—á–∏–∫ AI —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —á–∞—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
        conn = sqlite3.connect('ai_study.db')
        c = conn.cursor()
        c.execute('''
            INSERT INTO result (filename, file_type, topics_json, summary, flashcards_json, 
                              full_text, user_id, access_token)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', ('test_chat.txt', '.txt', '[]', 'Test summary', '[]', 
              '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI —á–∞—Ç–∞.', user_id, 'test_token_123'))
        
        result_id = c.lastrowid
        conn.commit()
        conn.close()
        
        print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω: ID {result_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —á–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é test_client
        with app.test_client() as client:
            with app.test_request_context():
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                with client.session_transaction() as sess:
                    sess['_user_id'] = str(user_id)
                    sess['_fresh'] = True
                
                print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞ AI —á–∞—Ç–∞:")
                print("-" * 40)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 5 —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏)
                for i in range(1, 6):
                    response = client.post(f'/api/chat/{result_id}', 
                                         json={'message': f'–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i}'},
                                         content_type='application/json')
                    
                    if response.status_code == 200:
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {i}/5: —Ä–∞–∑—Ä–µ—à–µ–Ω–æ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                    else:
                        data = response.get_json() if response.is_json else {}
                        print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {i}/5: –∑–∞–ø—Ä–µ—â–µ–Ω–æ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                        print(f"   –û—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                usage_stats = subscription_manager.get_usage_stats(user_id)
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π:")
                print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_stats['ai_chat']['used']}")
                print(f"   –õ–∏–º–∏—Ç: {usage_stats['ai_chat']['limit']}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 6-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)
                print(f"\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:")
                print("-" * 40)
                
                response = client.post(f'/api/chat/{result_id}', 
                                     json={'message': '–®–µ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ'},
                                     content_type='application/json')
                
                if response.status_code == 403:
                    data = response.get_json()
                    print(f"‚úÖ 6-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('error', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
                    print(f"   –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω: {data.get('limit_exceeded', False)}")
                    print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data.get('upgrade_required', False)}")
                else:
                    print(f"‚ùå 6-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                    if response.is_json:
                        print(f"   –û—Ç–≤–µ—Ç: {response.get_json()}")
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                usage_stats = subscription_manager.get_usage_stats(user_id)
                print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_stats['ai_chat']['used']}")
                print(f"   –õ–∏–º–∏—Ç: {usage_stats['ai_chat']['limit']}")
                print(f"   –ü—Ä–µ–≤—ã—à–µ–Ω: {usage_stats['ai_chat']['used'] >= usage_stats['ai_chat']['limit']}")
        
        print(f"\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return user_id, result_id
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return None, None

def cleanup_test_data(user_id, result_id):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not user_id:
        return
        
    import sqlite3
    
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if result_id:
            c.execute('DELETE FROM chat_history WHERE result_id = ?', (result_id,))
            c.execute('DELETE FROM result WHERE id = ?', (result_id,))
        
        c.execute('DELETE FROM subscription_usage WHERE user_id = ?', (user_id,))
        c.execute('DELETE FROM subscription_history WHERE user_id = ?', (user_id,))
        c.execute('DELETE FROM users WHERE id = ?', (user_id,))
        
        conn.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == '__main__':
    user_id, result_id = test_ai_chat_limit_fix()
    
    if user_id:
        cleanup = input("\n–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ").lower().strip()
        if cleanup in ['y', 'yes', '–¥–∞']:
            cleanup_test_data(user_id, result_id)