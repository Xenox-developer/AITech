#!/usr/bin/env python3
import sqlite3
import json
from datetime import datetime

# Демонстрационные данные для тестирования режима теста
demo_flashcards = [
    {
        "question": "Что такое машинное обучение?",
        "answer": "Машинное обучение — это раздел искусственного интеллекта, который позволяет компьютерам обучаться и принимать решения на основе данных без явного программирования для каждой конкретной задачи.",
        "difficulty": 1,
        "category": "Основы",
        "memory_hook": "ML = Машина Учится",
        "common_mistakes": "Не путать с обычным программированием",
        "related_topics": ["ИИ", "Алгоритмы", "Данные"]
    },
    {
        "question": "Какие основные типы машинного обучения существуют?",
        "answer": "Основные типы: 1) Обучение с учителем (supervised learning) - есть правильные ответы, 2) Обучение без учителя (unsupervised learning) - нет правильных ответов, 3) Обучение с подкреплением (reinforcement learning) - обучение через награды и наказания.",
        "difficulty": 2,
        "category": "Типы обучения",
        "memory_hook": "Учитель, Без учителя, Подкрепление",
        "common_mistakes": "Путать supervised и unsupervised",
        "related_topics": ["Классификация", "Кластеризация", "Регрессия"]
    },
    {
        "question": "Что такое переобучение (overfitting)?",
        "answer": "Переобучение — это ситуация, когда модель слишком хорошо запоминает обучающие данные, включая шум и случайные флуктуации, что приводит к плохой работе на новых данных. Модель теряет способность к обобщению.",
        "difficulty": 2,
        "category": "Проблемы обучения",
        "memory_hook": "Зубрила, который не может применить знания",
        "common_mistakes": "Думать, что высокая точность на обучающих данных всегда хорошо",
        "related_topics": ["Валидация", "Регуляризация", "Кросс-валидация"]
    },
    {
        "question": "Что такое градиентный спуск?",
        "answer": "Градиентный спуск — это итерационный алгоритм оптимизации для поиска минимума функции потерь. Он работает путем вычисления градиента (производной) функции потерь и движения в направлении, противоположном градиенту.",
        "difficulty": 3,
        "category": "Оптимизация",
        "memory_hook": "Спускаемся с горы по самому крутому склону",
        "common_mistakes": "Неправильный выбор скорости обучения",
        "related_topics": ["Функция потерь", "Производная", "Оптимизация"]
    },
    {
        "question": "Что такое нейронная сеть?",
        "answer": "Нейронная сеть — это вычислительная модель, вдохновленная биологическими нейронными сетями. Состоит из связанных узлов (нейронов), организованных в слои, которые обрабатывают информацию путем передачи сигналов через взвешенные соединения.",
        "difficulty": 2,
        "category": "Нейронные сети",
        "memory_hook": "Искусственный мозг из связанных нейронов",
        "common_mistakes": "Думать, что это точная копия мозга",
        "related_topics": ["Перцептрон", "Активация", "Веса"]
    }
]

def create_demo_result():
    """Создает демонстрационный результат в базе данных"""
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    # Создаем демонстрационные данные
    topics_data = {
        "main_topics": [
            {
                "title": "Основы машинного обучения",
                "summary": "Введение в концепции ML",
                "subtopics": ["Определения", "Типы обучения"],
                "key_concepts": ["ML", "ИИ", "Алгоритмы"],
                "examples": ["Классификация email", "Рекомендации"],
                "complexity": "basic"
            }
        ],
        "concept_map": {"relationships": []}
    }
    
    summary = """
    # Основы машинного обучения
    
    Машинное обучение является ключевой областью искусственного интеллекта, которая позволяет компьютерам обучаться на данных.
    
    ## Основные концепции:
    - Обучение с учителем (supervised learning) - алгоритмы обучаются на размеченных данных
    - Обучение без учителя (unsupervised learning) - поиск скрытых закономерностей в данных
    - Обучение с подкреплением (reinforcement learning) - обучение через взаимодействие со средой
    - Переобучение (overfitting) - модель слишком хорошо запоминает обучающие данные
    - Градиентный спуск - алгоритм оптимизации для минимизации функции потерь
    - Нейронные сети - модели, вдохновленные работой человеческого мозга
    - Глубокое обучение - подраздел ML с использованием глубоких нейронных сетей
    
    ## Применения:
    - Классификация изображений
    - Обработка естественного языка
    - Рекомендательные системы
    - Автономные транспортные средства
    - Медицинская диагностика
    """
    
    # Сохраняем результат
    c.execute('''
        INSERT INTO result (
            filename, file_type, topics_json, summary, flashcards_json,
            mind_map_json, study_plan_json, quality_json,
            video_segments_json, key_moments_json, full_text, user_id
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        'demo_ml_basics.pdf', 
        '.pdf', 
        json.dumps(topics_data, ensure_ascii=False),
        summary,
        json.dumps(demo_flashcards, ensure_ascii=False),
        json.dumps({}, ensure_ascii=False),
        json.dumps({}, ensure_ascii=False),
        json.dumps({}, ensure_ascii=False),
        json.dumps([], ensure_ascii=False),
        json.dumps([], ensure_ascii=False),
        summary,
        None  # Доступно всем пользователям
    ))
    
    result_id = c.lastrowid
    conn.commit()
    conn.close()
    
    print(f"Создан демонстрационный результат с ID: {result_id}")
    print(f"Доступен по адресу: http://localhost:5000/result/{result_id}")
    print(f"Режим теста: http://localhost:5000/test/{result_id}")
    
    return result_id

if __name__ == '__main__':
    create_demo_result()