#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
import sqlite3
import hashlib
import secrets

def generate_password_hash(password):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è"""
    salt = secrets.token_hex(16)
    password_hash = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt.encode('utf-8'), 100000)
    return salt + password_hash.hex()

def check_password_hash(stored_hash, password):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    salt = stored_hash[:32]
    stored_password_hash = stored_hash[32:]
    password_hash = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt.encode('utf-8'), 100000)
    return password_hash.hex() == stored_password_hash

def test_auth_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π...")
    password = "test123456"
    hash1 = generate_password_hash(password)
    hash2 = generate_password_hash(password)
    
    print(f"   –ü–∞—Ä–æ–ª—å: {password}")
    print(f"   –•–µ—à 1: {hash1[:50]}...")
    print(f"   –•–µ—à 2: {hash2[:50]}...")
    print(f"   –•–µ—à–∏ —Ä–∞–∑–Ω—ã–µ: {hash1 != hash2} ‚úì")
    print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è 1: {check_password_hash(hash1, password)} ‚úì")
    print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è 2: {check_password_hash(hash2, password)} ‚úì")
    print(f"   –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: {not check_password_hash(hash1, 'wrong')} ‚úì")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    test_email = "test@example.com"
    test_username = "TestUser"
    test_password = "secure123"
    password_hash = generate_password_hash(test_password)
    
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    c.execute('DELETE FROM users WHERE email = ?', (test_email,))
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        c.execute('''
            INSERT INTO users (email, username, password_hash, created_at, is_active, subscription_type)
            VALUES (?, ?, ?, datetime('now'), ?, ?)
        ''', (test_email, test_username, password_hash, True, 'free'))
        
        user_id = c.lastrowid
        conn.commit()
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID={user_id}, Email={test_email} ‚úì")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('SELECT * FROM users WHERE id = ?', (user_id,))
        user_data = c.fetchone()
        if user_data:
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ ID: {user_data[2]} ‚úì")
        
        c.execute('SELECT * FROM users WHERE email = ?', (test_email,))
        user_data = c.fetchone()
        if user_data:
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ Email: {user_data[2]} ‚úì")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            stored_hash = user_data[3]
            print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å: {check_password_hash(stored_hash, test_password)} ‚úì")
            print(f"   –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å: {not check_password_hash(stored_hash, 'wrong')} ‚úì")
        
        # –¢–µ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è email
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è email...")
        try:
            c.execute('''
                INSERT INTO users (email, username, password_hash, created_at, is_active, subscription_type)
                VALUES (?, ?, ?, datetime('now'), ?, ?)
            ''', (test_email, "AnotherUser", password_hash, True, 'free'))
            conn.commit()
            print("   ‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
        except sqlite3.IntegrityError:
            print("   –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ‚úì")
        
        # –û—á–∏—Å—Ç–∫–∞
        c.execute('DELETE FROM users WHERE email = ?', (test_email,))
        conn.commit()
        print("\n4. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã ‚úì")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

def show_database_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('SELECT COUNT(*) FROM users')
    users_count = c.fetchone()[0]
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    c.execute('SELECT COUNT(*) FROM result')
    results_count = c.fetchone()[0]
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_count}")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    c.execute('SELECT email, username, created_at FROM users ORDER BY created_at DESC LIMIT 5')
    recent_users = c.fetchall()
    
    if recent_users:
        print("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        for email, username, created_at in recent_users:
            print(f"     ‚Ä¢ {username} ({email}) - {created_at}")
    
    conn.close()

if __name__ == '__main__':
    test_auth_system()
    show_database_info()