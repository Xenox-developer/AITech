#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
import sqlite3
import hashlib
import secrets
from datetime import datetime

def generate_password_hash(password):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è"""
    salt = secrets.token_hex(16)
    password_hash = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt.encode('utf-8'), 100000)
    return salt + password_hash.hex()

def create_demo_users():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    demo_users = [
        {
            'email': 'admin@ai-konspekt.ru',
            'username': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'password': 'admin123',
            'subscription_type': 'premium'
        },
        {
            'email': 'student@example.com',
            'username': '–°—Ç—É–¥–µ–Ω—Ç',
            'password': 'student123',
            'subscription_type': 'free'
        },
        {
            'email': 'teacher@university.edu',
            'username': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
            'password': 'teacher123',
            'subscription_type': 'premium'
        }
    ]
    
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    for user_data in demo_users:
        # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        c.execute('DELETE FROM users WHERE email = ?', (user_data['email'],))
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password_hash = generate_password_hash(user_data['password'])
        
        try:
            c.execute('''
                INSERT INTO users (email, username, password_hash, created_at, is_active, subscription_type)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                user_data['email'],
                user_data['username'],
                password_hash,
                datetime.now(),
                True,
                user_data['subscription_type']
            ))
            
            print(f"   ‚úÖ {user_data['username']} ({user_data['email']})")
            print(f"      –ü–∞—Ä–æ–ª—å: {user_data['password']}")
            print(f"      –ü–æ–¥–ø–∏—Å–∫–∞: {user_data['subscription_type']}")
            print()
            
        except sqlite3.IntegrityError as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {user_data['email']}: {e}")
    
    conn.commit()
    conn.close()

def show_users_table():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üìã –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    c.execute('''
        SELECT id, email, username, created_at, is_active, subscription_type
        FROM users
        ORDER BY created_at DESC
    ''')
    
    users = c.fetchall()
    
    if users:
        print(f"{'ID':<3} {'Email':<25} {'–ò–º—è':<15} {'–î–∞—Ç–∞':<19} {'–ê–∫—Ç–∏–≤–µ–Ω':<7} {'–ü–æ–¥–ø–∏—Å–∫–∞':<10}")
        print("-" * 85)
        
        for user in users:
            user_id, email, username, created_at, is_active, subscription = user
            created_date = created_at[:19] if created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            active_status = '–î–∞' if is_active else '–ù–µ—Ç'
            
            print(f"{user_id:<3} {email:<25} {username:<15} {created_date:<19} {active_status:<7} {subscription:<10}")
    else:
        print("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    conn.close()

def create_demo_results():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('SELECT id, username FROM users')
    users = c.fetchall()
    
    if not users:
        print("   ‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        conn.close()
        return
    
    demo_results = [
        {
            'filename': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π_–∞–Ω–∞–ª–∏–∑_–ª–µ–∫—Ü–∏—è_1.pdf',
            'file_type': '.pdf',
            'summary': '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –ø—Ä–µ–¥–µ–ª–æ–≤ –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π.',
            'topics': ['–ü—Ä–µ–¥–µ–ª—ã —Ñ—É–Ω–∫—Ü–∏–π', '–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å', '–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ'],
            'flashcards': [
                {'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–µ–¥–µ–ª —Ñ—É–Ω–∫—Ü–∏–∏?', 'answer': '–ó–Ω–∞—á–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Å—Ç—Ä–µ–º–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–æ—á–∫–µ.'},
                {'question': '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏', 'answer': '–§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞ –≤ —Ç–æ—á–∫–µ, –µ—Å–ª–∏ –ø—Ä–µ–¥–µ–ª —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ —Ä–∞–≤–µ–Ω –∑–Ω–∞—á–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–∏.'}
            ]
        },
        {
            'filename': 'Python_–æ—Å–Ω–æ–≤—ã_–≤–∏–¥–µ–æ.mp4',
            'file_type': '.mp4',
            'summary': '–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, —É—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã.',
            'topics': ['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', '–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö', '–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã'],
            'flashcards': [
                {'question': '–ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ Python?', 'answer': '–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ: x = 10'},
                {'question': '–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ Python', 'answer': 'int, float, str, bool, list, dict, tuple'}
            ]
        }
    ]
    
    for i, result_data in enumerate(demo_results):
        user_id = users[i % len(users)][0]  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        
        try:
            c.execute('''
                INSERT INTO result (
                    filename, file_type, topics_json, summary, flashcards_json,
                    mind_map_json, study_plan_json, quality_json,
                    video_segments_json, key_moments_json, full_text, user_id, created_at
                )
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                result_data['filename'],
                result_data['file_type'],
                str(result_data['topics']),
                result_data['summary'],
                str(result_data['flashcards']),
                '{}', '{}', '{}', '[]', '[]', '',
                user_id,
                datetime.now()
            ))
            
            print(f"   ‚úÖ {result_data['filename']} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {users[i % len(users)][1]})")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    conn.commit()
    conn.close()

def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    
    conn = sqlite3.connect('ai_study.db')
    c = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    c.execute('SELECT COUNT(*) FROM users')
    users_count = c.fetchone()[0]
    
    c.execute('SELECT COUNT(*) FROM result')
    results_count = c.fetchone()[0]
    
    c.execute('SELECT COUNT(*) FROM users WHERE subscription_type = "premium"')
    premium_users = c.fetchone()[0]
    
    print(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
    print(f"   üìÑ –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_count}")
    print(f"   üëë Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    c.execute('''
        SELECT u.username, COUNT(r.id) as results_count
        FROM users u
        LEFT JOIN result r ON u.id = r.user_id
        GROUP BY u.id, u.username
        ORDER BY results_count DESC
    ''')
    
    user_stats = c.fetchall()
    
    if user_stats:
        print("\n   üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        for username, count in user_stats:
            print(f"      ‚Ä¢ {username}: {count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    conn.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ AI-–∫–æ–Ω—Å–ø–µ–∫—Ç")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    create_demo_users()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    show_users_table()
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    create_demo_results()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    show_statistics()
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüåê –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞:")
    print("   http://localhost:5000")
    print("\nüîë –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
    print("   admin@ai-konspekt.ru / admin123")
    print("   student@example.com / student123")
    print("   teacher@university.edu / teacher123")
    print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:")
    print("   python app.py")

if __name__ == '__main__':
    main()