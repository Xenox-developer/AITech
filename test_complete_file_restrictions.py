#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤ (PPTX –∏ –≤–∏–¥–µ–æ)
"""

import os
import sys
import sqlite3
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from subscription_manager import subscription_manager, SUBSCRIPTION_PLANS

def create_test_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_db:
        test_db_path = tmp_db.name
    
    conn = sqlite3.connect(test_db_path)
    c = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''
        CREATE TABLE users (
            id INTEGER PRIMARY KEY,
            email TEXT UNIQUE,
            subscription_type TEXT DEFAULT 'starter',
            subscription_status TEXT DEFAULT 'active',
            monthly_analyses_used INTEGER DEFAULT 0,
            monthly_reset_date TEXT,
            total_pdf_pages_used INTEGER DEFAULT 0,
            total_video_minutes_used INTEGER DEFAULT 0,
            ai_chat_messages_used INTEGER DEFAULT 0,
            monthly_video_uploads_used INTEGER DEFAULT 0,
            subscription_start_date TEXT,
            subscription_end_date TEXT
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = [
        (1, 'freemium@test.com', 'freemium'),
        (2, 'lite@test.com', 'lite'),
        (3, 'starter@test.com', 'starter'),
        (4, 'basic@test.com', 'basic'),
        (5, 'pro@test.com', 'pro')
    ]
    
    for user_id, email, plan in test_users:
        c.execute('''
            INSERT INTO users (id, email, subscription_type)
            VALUES (?, ?, ?)
        ''', (user_id, email, plan))
    
    conn.commit()
    conn.close()
    
    return test_db_path

def test_plan_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤...")
    
    expected_config = {
        'freemium': {'pptx_support': False, 'video_support': False},
        'lite': {'pptx_support': False, 'video_support': False},
        'starter': {'pptx_support': True, 'video_support': True},
        'basic': {'pptx_support': True, 'video_support': True},
        'pro': {'pptx_support': True, 'video_support': True}
    }
    
    all_passed = True
    
    for plan, expected in expected_config.items():
        if plan in SUBSCRIPTION_PLANS:
            actual_pptx = SUBSCRIPTION_PLANS[plan].pptx_support
            actual_video = SUBSCRIPTION_PLANS[plan].video_support
            
            pptx_ok = actual_pptx == expected['pptx_support']
            video_ok = actual_video == expected['video_support']
            
            status = "‚úÖ" if (pptx_ok and video_ok) else "‚ùå"
            print(f"  {plan.upper()}: {status}")
            print(f"    PPTX: {actual_pptx} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected['pptx_support']})")
            print(f"    –í–∏–¥–µ–æ: {actual_video} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected['video_support']})")
            
            if not (pptx_ok and video_ok):
                all_passed = False
        else:
            print(f"  ‚ùå {plan.upper()}: –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            all_passed = False
    
    return all_passed

def test_file_restrictions():
    """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ subscription_manager"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤...")
    
    test_db_path = create_test_database()
    original_db_path = subscription_manager.db_path
    subscription_manager.db_path = test_db_path
    
    try:
        all_passed = True
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞–Ω
        for user_id in range(1, 6):
            user_subscription = subscription_manager.get_user_subscription(user_id)
            plan = user_subscription['type']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PPTX
            pptx_allowed, pptx_message = subscription_manager.check_pptx_support(user_id)
            expected_pptx = SUBSCRIPTION_PLANS[plan].pptx_support
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ
            video_allowed, video_message = subscription_manager.check_video_support(user_id)
            expected_video = SUBSCRIPTION_PLANS[plan].video_support
            
            pptx_ok = pptx_allowed == expected_pptx
            video_ok = video_allowed == expected_video
            
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if (pptx_ok and video_ok) else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"  {plan.upper()}: {status}")
            print(f"    PPTX: {'‚úÖ' if pptx_ok else '‚ùå'} (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {pptx_allowed})")
            if pptx_message:
                print(f"      –°–æ–æ–±—â–µ–Ω–∏–µ: {pptx_message}")
            print(f"    –í–∏–¥–µ–æ: {'‚úÖ' if video_ok else '‚ùå'} (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {video_allowed})")
            if video_message:
                print(f"      –°–æ–æ–±—â–µ–Ω–∏–µ: {video_message}")
            
            if not (pptx_ok and video_ok):
                all_passed = False
        
        return all_passed
        
    finally:
        subscription_manager.db_path = original_db_path
        try:
            os.unlink(test_db_path)
        except:
            pass

def test_file_upload_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ app.py
    from app import allowed_file
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ allowed_file
    test_files = [
        ('document.pdf', True),
        ('presentation.pptx', True),
        ('video.mp4', True),
        ('video.mov', True),
        ('video.mkv', True),
        ('document.doc', False),
        ('image.jpg', False),
        ('text.txt', False),
        ('archive.zip', False),
    ]
    
    print("  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ allowed_file():")
    all_passed = True
    
    for filename, expected in test_files:
        result = allowed_file(filename)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"    {filename}: {status} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected}, –ø–æ–ª—É—á–µ–Ω–æ: {result})")
        if result != expected:
            all_passed = False
    
    return all_passed

def test_template_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤...")
    
    test_cases = [
        {
            'plan': 'freemium',
            'pptx_support': False,
            'video_support': False,
            'expected_accept': '.pdf',
            'expected_pptx_disabled': True,
            'expected_video_disabled': True
        },
        {
            'plan': 'lite',
            'pptx_support': False,
            'video_support': False,
            'expected_accept': '.pdf',
            'expected_pptx_disabled': True,
            'expected_video_disabled': True
        },
        {
            'plan': 'starter',
            'pptx_support': True,
            'video_support': True,
            'expected_accept': '.pdf,.pptx,.mp4,.mov,.mkv',
            'expected_pptx_disabled': False,
            'expected_video_disabled': False
        },
        {
            'plan': 'basic',
            'pptx_support': True,
            'video_support': True,
            'expected_accept': '.pdf,.pptx,.mp4,.mov,.mkv',
            'expected_pptx_disabled': False,
            'expected_video_disabled': False
        },
        {
            'plan': 'pro',
            'pptx_support': True,
            'video_support': True,
            'expected_accept': '.pdf,.pptx,.mp4,.mov,.mkv',
            'expected_pptx_disabled': False,
            'expected_video_disabled': False
        }
    ]
    
    all_passed = True
    
    for case in test_cases:
        plan = case['plan']
        pptx_support = case['pptx_support']
        video_support = case['video_support']
        expected_accept = case['expected_accept']
        expected_pptx_disabled = case['expected_pptx_disabled']
        expected_video_disabled = case['expected_video_disabled']
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ —à–∞–±–ª–æ–Ω–∞
        accepted_formats = ['.pdf']
        if pptx_support:
            accepted_formats.append('.pptx')
        if video_support:
            accepted_formats.extend(['.mp4', '.mov', '.mkv'])
        
        actual_accept = ','.join(accepted_formats)
        actual_pptx_disabled = not pptx_support
        actual_video_disabled = not video_support
        
        accept_correct = actual_accept == expected_accept
        pptx_correct = actual_pptx_disabled == expected_pptx_disabled
        video_correct = actual_video_disabled == expected_video_disabled
        
        all_correct = accept_correct and pptx_correct and video_correct
        status = "‚úÖ" if all_correct else "‚ùå"
        
        print(f"  {plan.upper()}: {status}")
        print(f"    Accept: {actual_accept}")
        print(f"    PPTX –æ—Ç–∫–ª—é—á–µ–Ω: {actual_pptx_disabled}")
        print(f"    –í–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {actual_video_disabled}")
        
        if not all_correct:
            all_passed = False
    
    return all_passed

def test_error_messages():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö...")
    
    test_db_path = create_test_database()
    original_db_path = subscription_manager.db_path
    subscription_manager.db_path = test_db_path
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–∞–π–ª–æ–≤
        test_users = [
            (1, 'freemium'),
            (2, 'lite')
        ]
        
        expected_pptx_message = "–ó–∞–≥—Ä—É–∑–∫–∞ PPTX —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–ª–∞–Ω–∞—Ö STARTER, BASIC –∏ PRO. –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        expected_video_message = "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–ª–∞–Ω–∞—Ö STARTER, BASIC –∏ PRO. –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        
        all_passed = True
        
        for user_id, plan in test_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PPTX —Å–æ–æ–±—â–µ–Ω–∏–µ
            pptx_allowed, pptx_message = subscription_manager.check_pptx_support(user_id)
            
            if pptx_allowed:
                print(f"  ‚ùå {plan.upper()}: PPTX —Ä–∞–∑—Ä–µ—à–µ–Ω, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å")
                all_passed = False
            elif pptx_message != expected_pptx_message:
                print(f"  ‚ùå {plan.upper()}: –ù–µ–≤–µ—Ä–Ω–æ–µ PPTX —Å–æ–æ–±—â–µ–Ω–∏–µ")
                all_passed = False
            else:
                print(f"  ‚úÖ {plan.upper()}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ PPTX —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            video_allowed, video_message = subscription_manager.check_video_support(user_id)
            
            if video_allowed:
                print(f"  ‚ùå {plan.upper()}: –í–∏–¥–µ–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å")
                all_passed = False
            elif video_message != expected_video_message:
                print(f"  ‚ùå {plan.upper()}: –ù–µ–≤–µ—Ä–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                all_passed = False
            else:
                print(f"  ‚úÖ {plan.upper()}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        return all_passed
        
    finally:
        subscription_manager.db_path = original_db_path
        try:
            os.unlink(test_db_path)
        except:
            pass

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤...")
    print("=" * 70)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤", test_plan_configuration),
        ("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤", test_file_restrictions),
        ("–õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤", test_file_upload_logic),
        ("–õ–æ–≥–∏–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤", test_template_logic),
        ("–°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö", test_error_messages)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 70)
    
    all_passed = True
    for test_name, passed in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if passed else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{test_name}: {status}")
        if not passed:
            all_passed = False
    
    print("=" * 70)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\n‚úÖ –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print("  üìÑ PDF —Ñ–∞–π–ª—ã: –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –ø–ª–∞–Ω–∞–º")
        print("  üìä PPTX —Ñ–∞–π–ª—ã: —Ç–æ–ª—å–∫–æ STARTER, BASIC, PRO")
        print("  üé• –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã: —Ç–æ–ª—å–∫–æ STARTER, BASIC, PRO")
        print("  üö´ FREE –∏ LITE: —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã")
        print("  üí¨ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
        print("  üé® –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        
        print("\nüìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:")
        print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ    –ü–ª–∞–Ω     ‚îÇ PDF  ‚îÇ PPTX ‚îÇ –í–∏–¥–µ–æ ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        print("‚îÇ FREEMIUM    ‚îÇ  ‚úÖ  ‚îÇ  ‚ùå  ‚îÇ   ‚ùå  ‚îÇ")
        print("‚îÇ LITE        ‚îÇ  ‚úÖ  ‚îÇ  ‚ùå  ‚îÇ   ‚ùå  ‚îÇ")
        print("‚îÇ STARTER     ‚îÇ  ‚úÖ  ‚îÇ  ‚úÖ  ‚îÇ   ‚úÖ  ‚îÇ")
        print("‚îÇ BASIC       ‚îÇ  ‚úÖ  ‚îÇ  ‚úÖ  ‚îÇ   ‚úÖ  ‚îÇ")
        print("‚îÇ PRO         ‚îÇ  ‚úÖ  ‚îÇ  ‚úÖ  ‚îÇ   ‚úÖ  ‚îÇ")
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
        return False
    
    return True

if __name__ == '__main__':
    success = run_all_tests()
    sys.exit(0 if success else 1)