# .dockerignore
venv/
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
.env.local
.env.*.local
pip-log.txt
pip-delete-this-directory.txt
.tox/
.coverage
.coverage.*
.cache
.pytest_cache/
nosetests.xml
coverage.xml
*.cover
*.log
.git
.gitignore
.mypy_cache
.pytest_cache
.hypothesis
.idea
.vscode
*.swp
*.swo
*~
.DS_Store
uploads/*
data/*.db
*.sqlite
*.db-journal
README.md
LICENSE
docker-compose*.yml
Dockerfile*
.dockerignore

---

# docker-compose.dev.yml - для разработки
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_study_app_dev
    ports:
      - "5000:5000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - SECRET_KEY=dev-secret-key
    volumes:
      - .:/app  # Монтируем весь проект для hot-reload
      - /app/__pycache__
      - /app/.pytest_cache
      - whisper_cache:/home/appuser/.cache/whisper
      - huggingface_cache:/home/appuser/.cache/huggingface
    command: ["python", "app.py"]  # Используем Flask dev server
    stdin_open: true
    tty: true

volumes:
  whisper_cache:
  huggingface_cache:

---

# docker-compose.gpu.yml - для использования с GPU
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    runtime: nvidia
    container_name: ai_study_app_gpu
    ports:
      - "5000:5000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MAX_UPLOAD_MB=${MAX_UPLOAD_MB:-500}
      - FLASK_ENV=${FLASK_ENV:-production}
      - SECRET_KEY=${SECRET_KEY}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      - ./uploads:/app/uploads
      - ./data:/app/data
      - whisper_cache:/home/appuser/.cache/whisper
      - huggingface_cache:/home/appuser/.cache/huggingface
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  whisper_cache:
    driver: local
  huggingface_cache:
    driver: local

---

# nginx.conf - конфигурация для Nginx
events {
    worker_connections 1024;
}

http {
    upstream app {
        server app:5000;
    }

    server {
        listen 80;
        server_name localhost;
        client_max_body_size 200M;

        location / {
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }

        location /static {
            alias /app/static;
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
    }
}

---

# build.sh - скрипт для сборки
#!/bin/bash

echo "🚀 Building AI Study MVP Docker images..."

# Проверка наличия .env файла
if [ ! -f .env ]; then
    echo "❌ .env file not found! Creating from example..."
    cp .env.example .env
    echo "⚠️  Please edit .env file and add your OPENAI_API_KEY"
    exit 1
fi

# Проверка OPENAI_API_KEY
source .env
if [ -z "$OPENAI_API_KEY" ]; then
    echo "❌ OPENAI_API_KEY not set in .env file!"
    exit 1
fi

# Создание необходимых директорий
mkdir -p uploads data

# Выбор режима сборки
echo "Select build mode:"
echo "1) CPU only (default)"
echo "2) GPU support"
echo "3) Development mode"
read -p "Enter choice [1-3]: " choice

case $choice in
    2)
        echo "📦 Building GPU version..."
        docker-compose -f docker-compose.gpu.yml build
        ;;
    3)
        echo "📦 Building development version..."
        docker-compose -f docker-compose.dev.yml build
        ;;
    *)
        echo "📦 Building CPU version..."
        docker-compose build
        ;;
esac

echo "✅ Build complete!"

---

# run-docker.sh - скрипт для запуска
#!/bin/bash

echo "🚀 Starting AI Study MVP..."

# Проверка Docker
if ! command -v docker &> /dev/null; then
    echo "❌ Docker not found! Please install Docker first."
    exit 1
fi

# Проверка docker-compose
if ! command -v docker-compose &> /dev/null; then
    echo "❌ docker-compose not found! Please install docker-compose first."
    exit 1
fi

# Выбор режима запуска
echo "Select run mode:"
echo "1) CPU only (default)"
echo "2) GPU support"
echo "3) Development mode"
echo "4) Production with Nginx"
read -p "Enter choice [1-4]: " choice

case $choice in
    2)
        echo "🚀 Starting with GPU support..."
        docker-compose -f docker-compose.gpu.yml up -d
        ;;
    3)
        echo "🚀 Starting in development mode..."
        docker-compose -f docker-compose.dev.yml up
        ;;
    4)
        echo "🚀 Starting in production mode with Nginx..."
        docker-compose --profile production up -d
        ;;
    *)
        echo "🚀 Starting with CPU only..."
        docker-compose up -d
        ;;
esac

echo "✅ Application started!"
echo "🌐 Access the application at: http://localhost:5000"
echo "📊 View logs: docker-compose logs -f app"
echo "🛑 Stop: docker-compose down"