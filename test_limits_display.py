#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
"""

import os
import sys
import sqlite3
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from subscription_manager import subscription_manager, SUBSCRIPTION_PLANS

def test_limits_display_data():
    """–¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_db:
        test_db_path = tmp_db.name
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –ø–æ–¥–ø–∏—Å–æ–∫
    original_db_path = subscription_manager.db_path
    subscription_manager.db_path = test_db_path
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(test_db_path)
        c = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''
            CREATE TABLE users (
                id INTEGER PRIMARY KEY,
                email TEXT UNIQUE,
                subscription_type TEXT DEFAULT 'starter',
                subscription_status TEXT DEFAULT 'active',
                monthly_analyses_used INTEGER DEFAULT 0,
                monthly_reset_date TEXT,
                total_pdf_pages_used INTEGER DEFAULT 0,
                total_video_minutes_used INTEGER DEFAULT 0,
                ai_chat_messages_used INTEGER DEFAULT 0,
                monthly_video_uploads_used INTEGER DEFAULT 0,
                subscription_start_date TEXT,
                subscription_end_date TEXT
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏
        test_users = [
            (1, 'freemium@test.com', 'freemium', 2),  # 2 –∏–∑ 3 –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
            (2, 'lite@test.com', 'lite', 5),          # 5 –∏–∑ 8 –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
            (3, 'starter@test.com', 'starter', 3),    # 3 –∏–∑ 15 –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
        ]
        
        for user_id, email, plan, used_analyses in test_users:
            c.execute('''
                INSERT INTO users (id, email, subscription_type, monthly_analyses_used)
                VALUES (?, ?, ?, ?)
            ''', (user_id, email, plan, used_analyses))
        
        conn.commit()
        conn.close()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
        for user_id, email, plan, used_analyses in test_users:
            usage_stats = subscription_manager.get_usage_stats(user_id)
            user_subscription = subscription_manager.get_user_subscription(user_id)
            
            print(f"\nüìã –ü–ª–∞–Ω {plan.upper()}:")
            print(f"   Email: {email}")
            print(f"   –ê–Ω–∞–ª–∏–∑—ã: {usage_stats['analyses']['used']}/{usage_stats['analyses']['limit']}")
            pdf_limit_text = '‚àû' if usage_stats['pdf_pages']['unlimited'] else f'–¥–æ {usage_stats["pdf_pages"]["limit"]}'
            print(f"   PDF —Å—Ç—Ä–∞–Ω–∏—Ü: {pdf_limit_text}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–∏–¥–µ–æ
            video_support = user_subscription['limits'].video_support
            if video_support:
                video_text = '‚àû' if usage_stats['video_minutes']['unlimited'] else f'–¥–æ {usage_stats["video_minutes"]["limit"]} –º–∏–Ω'
            else:
                video_text = '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
            
            print(f"   –í–∏–¥–µ–æ: {video_text}")
            print(f"   PPTX –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {'‚úÖ' if user_subscription['limits'].pptx_support else '‚ùå'}")
            print(f"   –í–∏–¥–µ–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {'‚úÖ' if video_support else '‚ùå'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
            expected_config = SUBSCRIPTION_PLANS[plan]
            
            assert usage_stats['analyses']['used'] == used_analyses, f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è {plan}"
            assert usage_stats['analyses']['limit'] == expected_config.monthly_analyses, f"–ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è {plan}"
            assert usage_stats['pdf_pages']['limit'] == expected_config.max_pdf_pages, f"–ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç PDF —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è {plan}"
            assert video_support == expected_config.video_support, f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è {plan}"
            
            print(f"   ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
        return True
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        subscription_manager.db_path = original_db_path
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            os.unlink(test_db_path)
        except:
            pass

def simulate_template_rendering():
    """–°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
    
    print("\nüß™ –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ —à–∞–±–ª–æ–Ω–µ...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
    test_cases = [
        {
            'plan': 'freemium',
            'usage_stats': {
                'plan': 'freemium',
                'analyses': {'used': 2, 'limit': 3, 'unlimited': False},
                'pdf_pages': {'limit': 5, 'unlimited': False},
                'video_minutes': {'limit': 10, 'unlimited': False}
            },
            'user_subscription': {
                'limits': type('obj', (object,), {
                    'pptx_support': False,
                    'video_support': False
                })()
            }
        },
        {
            'plan': 'lite',
            'usage_stats': {
                'plan': 'lite',
                'analyses': {'used': 5, 'limit': 8, 'unlimited': False},
                'pdf_pages': {'limit': 15, 'unlimited': False},
                'video_minutes': {'limit': 20, 'unlimited': False}
            },
            'user_subscription': {
                'limits': type('obj', (object,), {
                    'pptx_support': False,
                    'video_support': False
                })()
            }
        },
        {
            'plan': 'starter',
            'usage_stats': {
                'plan': 'starter',
                'analyses': {'used': 3, 'limit': 15, 'unlimited': False},
                'pdf_pages': {'limit': 25, 'unlimited': False},
                'video_minutes': {'limit': 30, 'unlimited': False}
            },
            'user_subscription': {
                'limits': type('obj', (object,), {
                    'pptx_support': True,
                    'video_support': True
                })()
            }
        }
    ]
    
    for case in test_cases:
        plan = case['plan']
        usage_stats = case['usage_stats']
        user_subscription = case['user_subscription']
        
        print(f"\nüì± –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∞ {plan.upper()}:")
        print("   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print(f"   ‚îÇ üëë –ü–ª–∞–Ω: {plan.upper():<25} [–û–±–Ω–æ–≤–∏—Ç—å] ‚îÇ")
        print("   ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        
        # –ê–Ω–∞–ª–∏–∑—ã
        analyses_text = f"{usage_stats['analyses']['used']}/{usage_stats['analyses']['limit']}" if not usage_stats['analyses']['unlimited'] else f"{usage_stats['analyses']['used']} (‚àû)"
        print(f"   ‚îÇ –ê–Ω–∞–ª–∏–∑—ã: {analyses_text:<25} ‚îÇ")
        
        # PDF —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pdf_text = f"–¥–æ {usage_stats['pdf_pages']['limit']}" if not usage_stats['pdf_pages']['unlimited'] else "‚àû"
        print(f"   ‚îÇ PDF —Å—Ç—Ä–∞–Ω–∏—Ü: {pdf_text:<21} ‚îÇ")
        
        # –í–∏–¥–µ–æ
        if user_subscription['limits'].video_support:
            video_text = f"–¥–æ {usage_stats['video_minutes']['limit']} –º–∏–Ω" if not usage_stats['video_minutes']['unlimited'] else "‚àû"
        else:
            video_text = "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        print(f"   ‚îÇ –í–∏–¥–µ–æ: {video_text:<27} ‚îÇ")
        
        print("   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
        print("   üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤:")
        print("     ‚Ä¢ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã: ‚úÖ")
        print(f"     ‚Ä¢ PowerPoint (PPTX): {'‚úÖ' if user_subscription['limits'].pptx_support else '‚ùå üîí'}")
        print(f"     ‚Ä¢ MP4, MOV, MKV: {'‚úÖ' if user_subscription['limits'].video_support else '‚ùå üîí'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        print("   üìë –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏:")
        print("     ‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: ‚úÖ")
        print(f"     ‚Ä¢ –í–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ: {'‚úÖ' if user_subscription['limits'].video_support else '‚ùå üîí'}")
    
    print("\nüéâ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    return True

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test1_passed = test_limits_display_data()
    test2_passed = simulate_template_rendering()
    
    print("\n" + "=" * 60)
    if test1_passed and test2_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\n‚úÖ –ß—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è:")
        print("  üìä –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞–Ω–µ")
        print("  üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º")
        print("  üìÑ –õ–∏–º–∏—Ç—ã PDF —Å—Ç—Ä–∞–Ω–∏—Ü")
        print("  üé• –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ")
        print("  üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è FREE/LITE")
        print("  üîÑ –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        sys.exit(1)