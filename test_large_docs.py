#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent))

from ml import extract_topics_with_gpt, generate_summary, generate_flashcards

def create_test_text(size_category="small"):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    
    base_text = """
    –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–∑—É—á–∞–µ—Ç –º–µ—Ç–æ–¥—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –æ–±—É—á–∞—Ç—å—Å—è. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞–¥–∞—á–∞—Ö, –≥–¥–µ —Ç—Ä—É–¥–Ω–æ –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

    –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç:

    1. –û–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º (Supervised Learning)
    –í —ç—Ç–æ–º —Ç–∏–ø–µ –æ–±—É—á–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –∏–∑–≤–µ—Å—Ç–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
    - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∫–ª–∞—Å—Å–∞
    - –†–µ–≥—Ä–µ—Å—Å–∏—è: –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    
    –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã: –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è, –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è, –¥–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π, —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å, –º–µ—Ç–æ–¥ –æ–ø–æ—Ä–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ (SVM), –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏.

    2. –û–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è (Unsupervised Learning)
    –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏. –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
    - –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è: –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    - –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏: —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    - –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π: –≤—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    
    –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã: k-means, –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è, DBSCAN, PCA, t-SNE, –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä—ã.

    3. –û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º (Reinforcement Learning)
    –ê–≥–µ–Ω—Ç –æ–±—É—á–∞–µ—Ç—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ —Å—Ä–µ–¥–µ, –ø–æ–ª—É—á–∞—è –Ω–∞–≥—Ä–∞–¥—ã –∏–ª–∏ —à—Ç—Ä–∞—Ñ—ã –∑–∞ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è. –¶–µ–ª—å ‚Äî –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º–∞—Ä–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É.
    
    –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–≥—Ä–∞–¥–∞, –ø–æ–ª–∏—Ç–∏–∫–∞, —Ñ—É–Ω–∫—Ü–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–∏.
    –ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è: –∏–≥—Ä—ã, —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞, –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.

    –ü—Ä–æ—Ü–µ—Å—Å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤:

    1. –°–±–æ—Ä –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —É—Å–ø–µ—Ö–∞ –º–æ–¥–µ–ª–∏. –≠—Ç–∞–ø—ã:
    - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    - –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é, –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏

    2. –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    –í—ã–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏, —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏:
    - –î–ª—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥, —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å
    - –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ (CNN)
    - –î–ª—è —Ç–µ–∫—Å—Ç–∞: —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ —Å–µ—Ç–∏ (RNN), —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã
    - –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤: ARIMA, LSTM

    3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    –ü—Ä–æ—Ü–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
    - –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å
    - –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ (SGD, Adam, RMSprop)
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    - –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è

    4. –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:
    - –î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: —Ç–æ—á–Ω–æ—Å—Ç—å, –ø–æ–ª–Ω–æ—Ç–∞, F1-–º–µ—Ä–∞, AUC-ROC
    - –î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏: MAE, MSE, RMSE, R¬≤
    - –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ü–µ–Ω–∫–∏

    5. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –µ–µ —Ä–∞–±–æ—Ç—ã:
    - API –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    """
    
    if size_category == "small":
        return base_text
    elif size_category == "medium":
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–µ–∫—Å—Ç 3 —Ä–∞–∑–∞ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        return base_text + "\n\n" + base_text.replace("–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç") + "\n\n" + base_text.replace("–∞–ª–≥–æ—Ä–∏—Ç–º", "–º–µ—Ç–æ–¥")
    elif size_category == "large":
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
        large_text = base_text
        for i in range(8):  # –ü–æ–≤—Ç–æ—Ä—è–µ–º 8 —Ä–∞–∑ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏
            modified_text = base_text.replace("–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", f"–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (—Ä–∞–∑–¥–µ–ª {i+1})")
            modified_text = modified_text.replace("–¥–∞–Ω–Ω—ã–µ", f"–¥–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ {i+1}")
            large_text += f"\n\n=== –†–ê–ó–î–ï–õ {i+1} ===\n\n" + modified_text
        return large_text
    
    return base_text

def test_processing(text, category):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞"""
    print(f"\n{'='*50}")
    print(f"–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: {category.upper()}")
    print(f"–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"{'='*50}")
    
    try:
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º
        print("\n1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º...")
        topics = extract_topics_with_gpt(text)
        print(f"   ‚úì –ù–∞–π–¥–µ–Ω–æ —Ç–µ–º: {len(topics.get('main_topics', []))}")
        print(f"   ‚úì –°–≤—è–∑–µ–π: {len(topics.get('concept_map', {}).get('relationships', []))}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ...")
        summary = generate_summary(text)
        print(f"   ‚úì –î–ª–∏–Ω–∞ —Ä–µ–∑—é–º–µ: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–ª–µ—à-–∫–∞—Ä—Ç
        print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–ª–µ—à-–∫–∞—Ä—Ç...")
        flashcards = generate_flashcards(text)
        print(f"   ‚úì –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(flashcards)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if topics.get('main_topics'):
            print(f"\n   –ü—Ä–∏–º–µ—Ä —Ç–µ–º—ã: {topics['main_topics'][0]['title']}")
        
        if flashcards:
            print(f"   –ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏: {flashcards[0]['q'][:50]}...")
        
        print(f"\n‚úÖ –¢–ï–°–¢ {category.upper()} –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï {category.upper()}: {str(e)}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –ë–û–õ–¨–®–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.environ.get('OPENAI_API_KEY'):
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export OPENAI_API_KEY='your-api-key-here'")
        return
    
    results = []
    
    # –¢–µ—Å—Ç 1: –ú–∞–ª—ã–π —Ç–µ–∫—Å—Ç (–¥–æ 15–ö —Å–∏–º–≤–æ–ª–æ–≤)
    small_text = create_test_text("small")
    results.append(test_processing(small_text, "–º–∞–ª—ã–π —Ç–µ–∫—Å—Ç"))
    
    # –¢–µ—Å—Ç 2: –°—Ä–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç (15–ö-50–ö —Å–∏–º–≤–æ–ª–æ–≤)
    medium_text = create_test_text("medium")
    results.append(test_processing(medium_text, "—Å—Ä–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç"))
    
    # –¢–µ—Å—Ç 3: –ë–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç (50–ö+ —Å–∏–º–≤–æ–ª–æ–≤)
    large_text = create_test_text("large")
    results.append(test_processing(large_text, "–±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç"))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    
    test_names = ["–ú–∞–ª—ã–π —Ç–µ–∫—Å—Ç", "–°—Ä–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç", "–ë–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç"]
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{name}: {status}")
    
    success_rate = sum(results) / len(results) * 100
    print(f"\n–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    if all(results):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")

if __name__ == "__main__":
    main()