"""
–°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è AI Study
"""
import sqlite3
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
import logging

logger = logging.getLogger(__name__)

@dataclass
class Achievement:
    """–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id: str
    title: str
    description: str
    icon: str
    category: str
    xp_reward: int
    unlock_condition: Dict
    rarity: str  # common, rare, epic, legendary

@dataclass
class UserLevel:
    """–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    level: int
    title: str
    xp_required: int
    xp_total: int
    benefits: List[str]
    badge_color: str

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–ø—ã—Ç–∞
XP_ACTIONS = {
    'document_analysis': 50,      # –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    'flashcard_review': 10,       # –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    'ai_chat_message': 5,         # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ AI —á–∞—Ç–µ
    'mind_map_creation': 30,      # –°–æ–∑–¥–∞–Ω–∏–µ mind map
    'streak_day': 20,             # –î–µ–Ω—å –ø–æ–¥—Ä—è–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    'perfect_session': 100,       # –ò–¥–µ–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (95%+)
    'share_content': 25,          # –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    'feedback_given': 15,         # –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
    'referral_signup': 200,       # –ü—Ä–∏–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–∞
    'course_completion': 500,     # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞
    'first_pptx': 75,            # –ü–µ—Ä–≤—ã–π PPTX –∞–Ω–∞–ª–∏–∑
    'video_analysis': 60,        # –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ
    'long_study_session': 40,    # –°–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è 30+ –º–∏–Ω—É—Ç
    'weekly_goal_complete': 150, # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Ü–µ–ª–∏
}

# –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
LEVEL_SYSTEM = {
    1: UserLevel(1, "üå± –ù–æ–≤–∏—á–æ–∫", 0, 100, ["–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º"], "secondary"),
    5: UserLevel(5, "üìö –£—á–µ–Ω–∏–∫", 500, 800, ["–ë–æ–Ω—É—Å +1 –∞–Ω–∞–ª–∏–∑ –≤ –º–µ—Å—è—Ü"], "info"),
    10: UserLevel(10, "üöÄ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å", 1500, 1200, ["–°–∫–∏–¥–∫–∞ 10% –Ω–∞ LITE –ø–ª–∞–Ω"], "primary"),
    15: UserLevel(15, "üéì –°—Ç—É–¥–µ–Ω—Ç", 3000, 1500, ["–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π PPTX –∞–Ω–∞–ª–∏–∑"], "warning"),
    25: UserLevel(25, "üî¨ –ê–Ω–∞–ª–∏—Ç–∏–∫", 6000, 2000, ["–°–∫–∏–¥–∫–∞ 15% –Ω–∞ STARTER –ø–ª–∞–Ω"], "success"),
    35: UserLevel(35, "üß† –≠–∫—Å–ø–µ—Ä—Ç", 10000, 2500, ["–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], "danger"),
    50: UserLevel(50, "‚≠ê –ú–∞—Å—Ç–µ—Ä", 16000, 3000, ["–°–∫–∏–¥–∫–∞ 20% –Ω–∞ BASIC –ø–ª–∞–Ω"], "dark"),
    75: UserLevel(75, "üëë –ì—É—Ä—É", 25000, 4000, ["–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"], "warning"),
    100: UserLevel(100, "üèÜ –õ–µ–≥–µ–Ω–¥–∞", 40000, 5000, ["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏"], "success"),
}

# –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
ACHIEVEMENTS = {
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    'first_analysis': Achievement(
        'first_analysis', 'üîç –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏', '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
        'fas fa-search', 'analysis', 50, {'analyses_count': 1}, 'common'
    ),
    'pdf_lover': Achievement(
        'pdf_lover', 'üìÑ –ö–Ω–∏–∂–Ω—ã–π —á–µ—Ä–≤—å', '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ 10 PDF —Ñ–∞–π–ª–æ–≤',
        'fas fa-file-pdf', 'analysis', 200, {'pdf_analyses': 10}, 'rare'
    ),
    'video_master': Achievement(
        'video_master', 'üé¨ –ö–∏–Ω–æ–º–∞–Ω', '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ 5 –≤–∏–¥–µ–æ',
        'fas fa-video', 'analysis', 300, {'video_analyses': 5}, 'rare'
    ),
    'pptx_expert': Achievement(
        'pptx_expert', 'üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ç–æ—Ä', '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ 10 PPTX —Ñ–∞–π–ª–æ–≤',
        'fas fa-file-powerpoint', 'analysis', 400, {'pptx_analyses': 10}, 'epic'
    ),
    'analysis_machine': Achievement(
        'analysis_machine', 'üöÄ –ú–∞—à–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞', '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ 100 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
        'fas fa-rocket', 'analysis', 1000, {'analyses_count': 100}, 'legendary'
    ),
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –û–±—É—á–µ–Ω–∏–µ
    'memory_champion': Achievement(
        'memory_champion', 'üß† –ß–µ–º–ø–∏–æ–Ω –ø–∞–º—è—Ç–∏', '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 100 –∫–∞—Ä—Ç–æ—á–µ–∫',
        'fas fa-brain', 'learning', 300, {'flashcard_reviews': 100}, 'rare'
    ),
    'speed_learner': Achievement(
        'speed_learner', '‚ö° –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–ò–∑—É—á–∏—Ç–µ 50 –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ –¥–µ–Ω—å',
        'fas fa-bolt', 'learning', 250, {'daily_flashcards': 50}, 'epic'
    ),
    'streak_master': Achievement(
        'streak_master', 'üî• –ú–∞—Å—Ç–µ—Ä —Å–µ—Ä–∏–π', '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π',
        'fas fa-fire', 'learning', 350, {'streak_days': 7}, 'epic'
    ),
    'perfect_student': Achievement(
        'perfect_student', 'üéØ –ò–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç', '95% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏',
        'fas fa-bullseye', 'learning', 200, {'session_accuracy': 0.95}, 'rare'
    ),
    'knowledge_seeker': Achievement(
        'knowledge_seeker', 'üìö –ò—Å–∫–∞—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π', '–ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã 5 —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
        'fas fa-graduation-cap', 'learning', 400, {'subjects_studied': 5}, 'epic'
    ),
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    'first_share': Achievement(
        'first_share', 'üéÅ –©–µ–¥—Ä—ã–π', '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø–µ—Ä–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º',
        'fas fa-share', 'social', 100, {'shares_count': 1}, 'common'
    ),
    'influencer': Achievement(
        'influencer', 'üåü –í–ª–∏—è—Ç–µ–ª—å–Ω—ã–π', '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π',
        'fas fa-users', 'social', 500, {'referrals_count': 5}, 'legendary'
    ),
    'helpful': Achievement(
        'helpful', 'üí¨ –ü–æ–º–æ—â–Ω–∏–∫', '–û—Å—Ç–∞–≤—å—Ç–µ 10 –æ—Ç–∑—ã–≤–æ–≤',
        'fas fa-comment', 'social', 200, {'reviews_count': 10}, 'rare'
    ),
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ
    'mind_mapper': Achievement(
        'mind_mapper', 'üó∫Ô∏è –ö–∞—Ä—Ç–æ–≥—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π', '–°–æ–∑–¥–∞–π—Ç–µ 20 mind maps',
        'fas fa-project-diagram', 'mastery', 400, {'mind_maps_created': 20}, 'epic'
    ),
    'ai_whisperer': Achievement(
        'ai_whisperer', 'ü§ñ –ó–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—å –ò–ò', '–ó–∞–¥–∞–π—Ç–µ 100 –≤–æ–ø—Ä–æ—Å–æ–≤ AI —á–∞—Ç—É',
        'fas fa-robot', 'mastery', 300, {'ai_messages': 100}, 'rare'
    ),
    'study_planner': Achievement(
        'study_planner', 'üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', '–°–æ–∑–¥–∞–π—Ç–µ 5 –ø–ª–∞–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è',
        'fas fa-calendar-alt', 'mastery', 350, {'study_plans_created': 5}, 'epic'
    ),
}

class GamificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, db_path: str = 'ai_study.db'):
        self.db_path = db_path
        self.init_gamification_tables()
    
    def init_gamification_tables(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        c.execute('''
            CREATE TABLE IF NOT EXISTS user_gamification (
                user_id INTEGER PRIMARY KEY,
                level INTEGER DEFAULT 1,
                total_xp INTEGER DEFAULT 0,
                current_streak INTEGER DEFAULT 0,
                longest_streak INTEGER DEFAULT 0,
                last_activity_date DATE,
                achievements_json TEXT DEFAULT '[]',
                weekly_goals_json TEXT DEFAULT '{}',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ XP
        c.execute('''
            CREATE TABLE IF NOT EXISTS xp_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                action_type TEXT NOT NULL,
                xp_gained INTEGER NOT NULL,
                description TEXT,
                metadata_json TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''
            CREATE TABLE IF NOT EXISTS user_achievements (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                achievement_id TEXT NOT NULL,
                unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, achievement_id),
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
        c.execute('''
            CREATE TABLE IF NOT EXISTS weekly_challenges (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                week_start DATE NOT NULL,
                challenge_type TEXT NOT NULL,
                target_value INTEGER NOT NULL,
                current_progress INTEGER DEFAULT 0,
                completed BOOLEAN DEFAULT FALSE,
                reward_xp INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        ''')
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        c.execute('CREATE INDEX IF NOT EXISTS idx_xp_history_user ON xp_history(user_id, created_at)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_achievements_user ON user_achievements(user_id)')
        c.execute('CREATE INDEX IF NOT EXISTS idx_challenges_user_week ON weekly_challenges(user_id, week_start)')
        
        conn.commit()
        conn.close()
    
    def get_user_gamification_data(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('SELECT * FROM user_gamification WHERE user_id = ?', (user_id,))
        user_data = c.fetchone()
        
        if not user_data:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            c.execute('''
                INSERT INTO user_gamification (user_id, level, total_xp)
                VALUES (?, 1, 0)
            ''', (user_id,))
            conn.commit()
            user_data = (user_id, 1, 0, 0, 0, None, '[]', '{}', datetime.now(), datetime.now())
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('SELECT achievement_id, unlocked_at FROM user_achievements WHERE user_id = ?', (user_id,))
        achievements = c.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é XP
        c.execute('''
            SELECT action_type, xp_gained, description, created_at
            FROM xp_history 
            WHERE user_id = ? 
            ORDER BY created_at DESC 
            LIMIT 10
        ''', (user_id,))
        recent_xp = c.fetchall()
        
        conn.close()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        current_level_info = self.get_level_info(user_data[2])  # total_xp
        
        return {
            'user_id': user_data[0],
            'level': user_data[1],
            'total_xp': user_data[2],
            'current_streak': user_data[3],
            'longest_streak': user_data[4],
            'last_activity_date': user_data[5],
            'achievements': [{'id': a[0], 'unlocked_at': a[1]} for a in achievements],
            'recent_xp': [{'action': r[0], 'xp': r[1], 'description': r[2], 'date': r[3]} for r in recent_xp],
            'level_info': current_level_info,
            'achievements_count': len(achievements),
            'next_level_xp': current_level_info['xp_to_next'] if current_level_info else 0
        }
    
    def get_level_info(self, total_xp: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ XP"""
        current_level = 1
        current_level_data = LEVEL_SYSTEM[1]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        for level, data in sorted(LEVEL_SYSTEM.items()):
            if total_xp >= data.xp_required:
                current_level = level
                current_level_data = data
            else:
                break
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        next_level = None
        next_level_data = None
        for level, data in sorted(LEVEL_SYSTEM.items()):
            if level > current_level:
                next_level = level
                next_level_data = data
                break
        
        xp_to_next = next_level_data.xp_required - total_xp if next_level_data else 0
        progress_percent = 0
        if next_level_data:
            level_xp_range = next_level_data.xp_required - current_level_data.xp_required
            current_progress = total_xp - current_level_data.xp_required
            progress_percent = min(100, (current_progress / level_xp_range) * 100) if level_xp_range > 0 else 100
        
        return {
            'current_level': current_level,
            'current_title': current_level_data.title,
            'current_benefits': current_level_data.benefits,
            'badge_color': current_level_data.badge_color,
            'next_level': next_level,
            'next_title': next_level_data.title if next_level_data else "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
            'xp_to_next': max(0, xp_to_next),
            'progress_percent': progress_percent,
            'total_xp': total_xp
        }
    
    def award_xp(self, user_id: int, action_type: str, description: str = None, metadata: Dict = None) -> Dict:
        """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ XP –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ"""
        if action_type not in XP_ACTIONS:
            logger.warning(f"Unknown action type: {action_type}")
            return {'success': False, 'error': 'Unknown action type'}
        
        xp_amount = XP_ACTIONS[action_type]
        
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            c.execute('SELECT level, total_xp FROM user_gamification WHERE user_id = ?', (user_id,))
            user_data = c.fetchone()
            
            if not user_data:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                c.execute('''
                    INSERT INTO user_gamification (user_id, level, total_xp)
                    VALUES (?, 1, ?)
                ''', (user_id, xp_amount))
                old_level = 1
                new_total_xp = xp_amount
            else:
                old_level, old_xp = user_data
                new_total_xp = old_xp + xp_amount
                
                # –û–±–Ω–æ–≤–ª—è–µ–º XP
                c.execute('''
                    UPDATE user_gamification 
                    SET total_xp = ?, updated_at = ?
                    WHERE user_id = ?
                ''', (new_total_xp, datetime.now(), user_id))
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é XP
            c.execute('''
                INSERT INTO xp_history (user_id, action_type, xp_gained, description, metadata_json)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, action_type, xp_amount, description, json.dumps(metadata) if metadata else None))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            old_level_info = self.get_level_info(new_total_xp - xp_amount)
            new_level_info = self.get_level_info(new_total_xp)
            
            level_up = new_level_info['current_level'] > old_level_info['current_level']
            
            if level_up:
                # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –±–∞–∑–µ
                c.execute('''
                    UPDATE user_gamification 
                    SET level = ?
                    WHERE user_id = ?
                ''', (new_level_info['current_level'], user_id))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            new_achievements = self.check_achievements(user_id, c)
            
            conn.commit()
            
            return {
                'success': True,
                'xp_gained': xp_amount,
                'total_xp': new_total_xp,
                'level_up': level_up,
                'new_level': new_level_info['current_level'] if level_up else None,
                'new_level_title': new_level_info['current_title'] if level_up else None,
                'new_achievements': new_achievements,
                'level_info': new_level_info
            }
            
        except Exception as e:
            conn.rollback()
            logger.error(f"Error awarding XP: {e}")
            return {'success': False, 'error': str(e)}
        finally:
            conn.close()
    
    def check_achievements(self, user_id: int, cursor) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        new_achievements = []
        
        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        cursor.execute('SELECT achievement_id FROM user_achievements WHERE user_id = ?', (user_id,))
        unlocked = set(row[0] for row in cursor.fetchall())
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
        stats = self.get_user_stats_for_achievements(user_id, cursor)
        
        for achievement_id, achievement in ACHIEVEMENTS.items():
            if achievement_id in unlocked:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if self.check_achievement_condition(achievement.unlock_condition, stats):
                # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                cursor.execute('''
                    INSERT INTO user_achievements (user_id, achievement_id)
                    VALUES (?, ?)
                ''', (user_id, achievement_id))
                
                # –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                cursor.execute('''
                    INSERT INTO xp_history (user_id, action_type, xp_gained, description)
                    VALUES (?, 'achievement_unlocked', ?, ?)
                ''', (user_id, achievement.xp_reward, f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement.title}'))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π XP
                cursor.execute('''
                    UPDATE user_gamification 
                    SET total_xp = total_xp + ?
                    WHERE user_id = ?
                ''', (achievement.xp_reward, user_id))
                
                new_achievements.append({
                    'id': achievement_id,
                    'title': achievement.title,
                    'description': achievement.description,
                    'icon': achievement.icon,
                    'xp_reward': achievement.xp_reward,
                    'rarity': achievement.rarity
                })
        
        return new_achievements
    
    def get_user_stats_for_achievements(self, user_id: int, cursor) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        stats = {}
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤
        cursor.execute('SELECT COUNT(*) FROM result WHERE user_id = ?', (user_id,))
        stats['analyses_count'] = cursor.fetchone()[0]
        
        # –ê–Ω–∞–ª–∏–∑—ã –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
        cursor.execute('SELECT file_type, COUNT(*) FROM result WHERE user_id = ? GROUP BY file_type', (user_id,))
        file_types = cursor.fetchall()
        for file_type, count in file_types:
            if file_type == 'pdf':
                stats['pdf_analyses'] = count
            elif file_type == 'video':
                stats['video_analyses'] = count
            elif file_type == 'pptx':
                stats['pptx_analyses'] = count
        
        # –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ñ–ª–µ—à-–∫–∞—Ä—Ç
        cursor.execute('SELECT COUNT(*) FROM user_progress WHERE user_id = ?', (user_id,))
        stats['flashcard_reviews'] = cursor.fetchone()[0]
        
        # AI —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute('SELECT COUNT(*) FROM chat_history WHERE user_id = ?', (user_id,))
        stats['ai_messages'] = cursor.fetchone()[0]
        
        # –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è
        cursor.execute('SELECT current_streak FROM user_gamification WHERE user_id = ?', (user_id,))
        streak_data = cursor.fetchone()
        stats['streak_days'] = streak_data[0] if streak_data else 0
        
        return stats
    
    def check_achievement_condition(self, condition: Dict, stats: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        for key, required_value in condition.items():
            if key not in stats:
                return False
            if stats[key] < required_value:
                return False
        return True
    
    def update_daily_streak(self, user_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        try:
            today = datetime.now().date()
            
            c.execute('SELECT current_streak, longest_streak, last_activity_date FROM user_gamification WHERE user_id = ?', (user_id,))
            data = c.fetchone()
            
            if not data:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                c.execute('''
                    INSERT INTO user_gamification (user_id, current_streak, longest_streak, last_activity_date)
                    VALUES (?, 1, 1, ?)
                ''', (user_id, today))
                conn.commit()
                return {'streak': 1, 'is_new_record': True}
            
            current_streak, longest_streak, last_activity = data
            last_date = datetime.strptime(last_activity, '%Y-%m-%d').date() if last_activity else None
            
            if last_date == today:
                # –£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω —Å–µ–≥–æ–¥–Ω—è
                return {'streak': current_streak, 'is_new_record': False}
            elif last_date == today - timedelta(days=1):
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Ä–∏—é
                new_streak = current_streak + 1
                new_longest = max(longest_streak, new_streak)
                is_record = new_streak > longest_streak
                
                c.execute('''
                    UPDATE user_gamification 
                    SET current_streak = ?, longest_streak = ?, last_activity_date = ?
                    WHERE user_id = ?
                ''', (new_streak, new_longest, today, user_id))
                
                # –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –¥–µ–Ω—å —Å–µ—Ä–∏–∏
                self.award_xp(user_id, 'streak_day', f'–î–µ–Ω—å {new_streak} —Å–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
                
                conn.commit()
                return {'streak': new_streak, 'is_new_record': is_record}
            else:
                # –°–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                c.execute('''
                    UPDATE user_gamification 
                    SET current_streak = 1, last_activity_date = ?
                    WHERE user_id = ?
                ''', (today, user_id))
                
                conn.commit()
                return {'streak': 1, 'is_new_record': False}
                
        except Exception as e:
            conn.rollback()
            logger.error(f"Error updating streak: {e}")
            return {'streak': 0, 'is_new_record': False}
        finally:
            conn.close()
    
    def get_leaderboard(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        c.execute('''
            SELECT 
                ug.user_id,
                u.username,
                ug.level,
                ug.total_xp,
                ug.current_streak,
                COUNT(ua.achievement_id) as achievements_count
            FROM user_gamification ug
            JOIN users u ON ug.user_id = u.id
            LEFT JOIN user_achievements ua ON ug.user_id = ua.user_id
            GROUP BY ug.user_id, u.username, ug.level, ug.total_xp, ug.current_streak
            ORDER BY ug.total_xp DESC, ug.level DESC
            LIMIT ?
        ''', (limit,))
        
        leaderboard = []
        for i, row in enumerate(c.fetchall(), 1):
            user_id, username, level, total_xp, streak, achievements = row
            level_info = self.get_level_info(total_xp)
            
            leaderboard.append({
                'rank': i,
                'user_id': user_id,
                'username': username,
                'level': level,
                'level_title': level_info['current_title'],
                'total_xp': total_xp,
                'current_streak': streak,
                'achievements_count': achievements,
                'badge_color': level_info['badge_color']
            })
        
        conn.close()
        return leaderboard

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
gamification = GamificationSystem()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
try:
    gamification.init_gamification_tables()
except Exception as e:
    logger.warning(f"Could not initialize gamification tables: {e}")